:d:An article about the future of game development and indie games.
:k:ThingsPool, Game, Free, Indie, GameDev, Webgame, Programming, Software, Graphics

[On Purity of Knowledge] 2022

"Have you done any programming in OpenGL?"

"Do you have experience with JQuery?"

"Have you shipped at least one commercial app that was made with Flutter?"

These are common types of questions which often arise during an engineer recruitment process.
Such questions, for sure, are crucial for ensuring that the job candidate will be able to jump right into one's role as soon as possible, and leverage the full maturity of one's expertise in whichever technical framework the company has been working on top of. This is definitely understandable, especially from the standpoint of business owners and marketing experts whose main concern is to complete a viable product and ship it on a timely manner.

As a developer, however, I cannot always ignore an incessantly recurring notion that the emphasis on such specific technical details are sometimes unbearably superficial, and that it is often based on some kind of short-sighted mannerism, politics, and gatekeeping in the IT industry rather than a plan that bears any long-term goal in mind.

Staying up-to-date with popular contemporary technologies is indeed a valuable habit in the job market. After all, one needs to learn how to use SASS in order to avoid writing multiple chunks of CSS in a repetitive manner, learn how to code in C++ in order to ensure that a AAA game is as computationally optimized as possible, and learn how to code in TypeScript because type ambiguity in Javascript can annoy the hell out of everyone.

It is all understandable, and I probably would've had a much greater chance of having high-paying jobs if I focused on mastering quantifiable bite-sized techniques such as specific programming languages, game engines, APIs, and etc, and proceeding so far as to prove my mastery over those techniques by taking tests and building a collection of certificates. And this would've actually helped me not only land on a coding job more easily, but also be equipped with enough skills to build functioning products more quickly.

There is a major problem with this, though.

My brain won't be able to stay fresh enough forever. I am still fairly young and thus am able to adapt myself to new trends in the software industry quite easily, but what about decades from now? When I become an old, middle-aged man in his 50s, will I still be able to learn the details of upcoming technologies of that time, in a competitive manner?

Let's imagine that it is the year 2050, and the most popular game engine I was using during my early years (Unity) has become obsolete. A new generation of incredibly smart kids have already come up with brand new species of hardware, a set of much more powerful programming languages, and much more efficient development pipelines. The aged brain of my older self will never stand a chance against these fiercely intelligent youngsters, who will never hesitate to replace every single grumpy old developer who has nothing else to do than spending the rest of their lifetime blaming the rest of the world for not keeping in tune with their obsolete old-school way of thinking. No matter how hard I try, the biological consequence of my aging process will eventually pull me out of the software development industry and into the coffin of retirement.

Just like Fortran, COBOL, Visual Basic, and myriads of hot technological standards of the 20th century are now nearly gone from the mainstream, today's hot technological standards will eventually sink into oblivion. Unity engine will be old, Unreal engine will be old, Golang programming will be old, and Rust programming will be old. Sure, some of them have established themselves as de facto standards of the industry and thus will last much longer than others (e.g. C/C++, OpenGL/DirectX, HTML/CSS/Javascript, etc). However, it is just a matter of time and luck until they are out of the spotlight. Once a bright young mind happens to come up with a new technology that is unquestionably superior to one I was working with for the last 2 or 3 decades, I will be screwed. At that moment, the only shield which will protect me from rendering decades of my experience obsolete will be the unwillingness of old corporate executives to fit themselves into new technologies, as well as internal corporate politics and gatekeeping.

However,

There are also things that are not going to be obsolete, no matter how much time passes by. Pure academic subjects, such as mathematics, natural science, and other purely theoretical domains of knowledge, will hardly become obsolete even after centuries of time sweeps through countless generations.

Calculus was invented in the 17th century, yet it still is the foundation of many contemporary topics in engineering such as optimization and control. Statistics was popularized in the 19th century, yet it still forms the backbone of scientific reasoning and is becoming ever more important due to the ongoing researches in machine learning & data mining. Discrete mathematics is just as old as the two aforementioned fields, yet it is the foundation of the theory of computation upon which all sorts of algorithms, data structures, architectural models, design patterns, and languages are formulated.

This is why I am focusing on learning more fundamental topics in engineering than specific techniques. Academic subjects which do not depend their existence upon industrial standards, such as programming paradigms (functional programming & logic programming), graph theory, computational logic, mathematical morphology, and other theoretical bodies of ideas which often provide deep insights in terms of how one should structure and implement computer programs, will withstand the deaths of contemporary technologies whilst still being relevant to practical applications.

This learning habit, I believe, will grant me an honor to have conversations with younger generations of engineers that are more productive than a rant like:

"IN MY DAYS, I had to use a tool called "Game Engine" and memorize a bunch of optimization tricks to circumvent the limited computing power of my time! Kids these days just don't understand how hard it used to be!"














:d:An article about the definition of creativity in game development.
:k:ThingsPool, Game, Free, Indie, Creativity

[On Creativity, and the Future of Indie Game Development] 2022

"Don't reinvent the wheel!"

Old-school game programmers who are fond of hard-coding everything from scratch probably have heard of this axiom a lot. In today's world where there is a plethora of game engines and third-party plugins, it sure is a valuable piece of wisdom to keep in mind. What's the point of inventing yet another graphics library, if one could simply use an already existing one such as OpenGL?

It seems pretty obvious that generic building blocks of a system, such as a graphics engine, physics engine, and so forth, should be borrowed from the end results of their specific fields of expertise, rather than being reformulated every time a new system is being built (unless one feels an urge to hyper-customize them for some reason).

So many contemporary game developers nowadays possess a tendency of "keeping everything as simple as possible", especially within areas in which engineering is heavily involved. They claim that any technical aspect of the game must utilize pre-made toolsets as much as possible, and avoid building features from ground up wherever it is affordable to do so.

This is indeed an efficient way to develop a videogame. After all, it is the "fun" part of the game that matters, not how the game was being made exactly. And if there is an easy way to implement a gameplay feature as opposed to a hard way, developers should probably go for the easy way and spend the rest of their time fine-tuning user interactions, adding more contents, and applying a spectrum of interdisciplinary design elements. This, for sure, is a great way of enriching the overall user experience.

However, I am afraid that this is somehow not enough for making a successful videogame.

Back in the old-school era of the game industry (1980s and early 1990s), there were not that many games in the market to compete against. A simple arcade game with a handful of clever mechanics would've been decent enough to attract a sufficient number of customers. Every new experimental genre or mechanic was an instant key to originality, and originality was oftentimes followed by profit in this brave new niche of innovation where any creative mind could contribute something fresh and unforeseen. And the audience was curious enough to be willing to pay for it.

Nowadays? Not so much. Decades of game development from all over the world has now drained this industry of almost every conceivable source of originality. It initially started off as: "There is no new genre I can think of!". Nowadays, it goes as far as: "There is no more weird, trippy in-game mechanic I can possibly think of!".

You have a bunch of creative ideas for your new indie game? Forget about it. Other developers probably have already tried every single one of them. Sure, you can still rearrange already existing gameplay ideas in different ways, thereby producing unique permutations of them, but even such degree of uniqueness quickly turns out to be blend and meaningless (like uniform white noise) as people get exposed to more and more of them. Of course, there still are ways of making best-selling games. Large AAA game companies, armed with hundreds of coders, artists, and writers, still have the ability to preserve their own market share by grinding in as much of their talent pool as possible to yield the world's highest-quality graphics, physics, and narrative details.

For an independent developer who would rather be a snake's head than a dragon's tail, however, this slit of opportunity does not help at all. No matter how hard a small group of indie developers try, there is no way for them to surpass the objective quality of a corporate-produced AAA game in terms of graphics, physics, and other quantitatively measurable dimensions, whose greatness is further magnified by an insurmountable scale of marketing.

To summarize, there are two common options for making a successful game in today's world, and both of them do not work out well for their own reasons:

(1) Develop a AAA game that is equipped with hyper-realistic graphics, hyper-realistic physics, a stunningly countless number of in-game elements, as well as storytelling that is so rich in context that it requires an enormous group of writers to build. (Only huge companies are eligible to this approach.)

(2) Develop an extremely creative game, which has gameplay features that are clearly original. (Too many indie developers are doing this, so one would say that "being creative" is no longer a powerful selling point.)

So, what should an indie developer do, in order to survive this red ocean of countless videogames and stand out as a competitive one? If neither talent-grinding nor "being creative" is a promising option for coming up with a game that sells well, is it even economically feasible to try to make a living out of indie games these days?

In my opinion, there is still a way. And the reason why I have not lost hope is that "creativity" itself is a broad concept which can be subdivided into two different types. If one type of creativity is deemed useless, we can utilize the other one.

(Type 1 - Soft Creativity)

Remember those younger days, when you were in high school and there was at least one kid in each classroom who was famous for being the "creative" one? He would always dress up in a quirky costume, play the guitar in the hallway, excel in art classes, and hate studying math and science because those subjects are supposed to be a set of authoritarian rules devised to annihilate one's imaginative power.

To him, creativity is all about being irrational. Anything that deviates from the norm is considered "creative", and therefore anything he writes, draws, speaks, and presents is a product of pure fantasy. He never fails to start off the engine of his own imaginative powerhouse by blowing bubbles of what-ifs. To him, an ideal process of designing a videogame begins with a sequence of unconventional suppositions like this:

"What if each in-game object that the player happens to touch instantly turns into a ragdoll, and then back again to its original rigid-body state as soon as the player touches it again? We might as well develop a puzzle game which takes place inside a museum in Rome, where there is a myriad of old marble sculptures each of which can be utilized as a temporary ragdoll for puzzle-solving purposes."

"What if, inside our game world, the moon really is made out of cheese and there is a federation of moon-mining corporates which are hiring out-of-job cows as unpaid interns to maximize their profit? Different regions of the moon are also made out of different types of cheese, so there must be also a huge number of moon experts who occupy most of their time analyzing the real estate price and estimated annual tax of each moon region, due to fluctuations in market demand."

"What if..."

And the list goes on.

This, of course, is an indescribably wondrous way of discovering unforeseen treasure islands of opportunity. Human imagination can sometimes be a key to hidden successes, and I do highly value the endeavors of creative individuals to leverage it as much as possible. However, are these "creative" pieces of imagination really creative enough? To me, the ones above I just came up with only demonstrate "soft creativity", as opposed to "hard creativity". A product of soft creativity is purely imaginative and thereby sparkles upon the throne of its own vibe, yet it is easily conceivable, easily replicable, and oftentimes isolates itself within its own context, mainly because it is a concoction of thoughts that were sluggishly brewed out of a loose web of irrationally resembling ideas. It is by no means cleverly articulated.

And since nearly anyone who spent their early childhood in a privileged upper middle class household of a first-world educational system, being granted the luxury of high-standard living without having to endure a soul-crushing prison of toxic competition that is founded upon an unbearably shallow standard of brute-force memorization and dexterity, is naturally equipped with the ability to conceive random irrational ideas and embellish them with their own independent collection of fantasies, "being creative" in the aforementioned (soft-creative) sense does not really mean anything other than: "You were given a chance to think randomly with less hesitation than, say, people in the third world".

(Type 2 - Hard Creativity)

Hard creativity is something different. It is hard to conceive, hard to replicate, and fitting it into an external context of meaning requires careful planning. It might comprise a hint of curious irrationality, yet the foundation of it is laid upon a ground of rational worldview - something which establishes consistent relations with pre-existing ideas.

When a professional architect designs a house, one would almost invariably say that the result of his/her design contains a lot more depth to it than a random house drawing scribbled by an amateur. This "depth" is the thing which distinguishes hard creativity from soft creativity.

In the videogame industry, hard creativity often comes in the form of technological innovations. To be honest, it would be careless to say that every innovation grants the developer a power of being sufficiently original to be able to stand out among the pool of kindred competitors. After all, making a VR/AR game might help increase the game's sale a bit because only a fraction of developers are venturing to make one at this time of writing, but probably not so much because there are still a truckload of innovators from all over the world who are eager to experiment with the hidden potentials of the VR/AR platform. It is a rat race where there are fewer rats and perhaps more cheese to eat, but nevertheless a rat race.

Selling a game is not as financially promising as selling consumable daily products (such as toilet papers, foods, etc), where being "unique" is not as strictly necessary as in the case of selling intellectual properties. In order to seriously make money off of a game, one needs to ensure that it is either marketed extremely well (which is not a feasible option for indie developers), or is built upon a unique playground of hard creativity which cannot be imitated by most people. Some of the examples of this "unique playground" are:

(1) A rare simulation game in which the user can experiment with unique culinary scenarios, such as making a cup of tea based upon a custom fluid motion simulator, as well as selling it to customers to improve the player's in-game reputations based on a psychological feedback loop of a typical tea-drinker.

(2) A procedural animal generator that the player can run to create all sorts of random animals (each of which possesses its own bone structure, muscular structure, behavioral pattern, metabolic pattern, and any customizable biological trait), and force them to undergo multiple stages of player-designed challenge sessions for the purpose of selecting competent ones via natural selection (e.g. Fighters' arena, race track, etc). Those who survive these challenge sessions will then be part of the player's inventory, and henceforth be used to defend the player's territory from enemies.

(3) A Turing-Complete ecological simulator, in which every constituent specie of the ecosystem can function as a computing unit of a hypothetical computer, which thereby lets the player effectively design a virtual computer inside his/her own computer by utilizing statistical cross-species interactions as means of computation (e.g. The total population of preys within the n-th voxel represents the value of the n-th indexed variable X[n], and the total population of predators within the n-th voxel is proportional to "-d(X[n])/dt" which represents the rate at which X[n] decrements at each point in time, and etc).

And the list goes on.

As you probably have realized, these seemingly complex ideas distinguish themselves from mere imaginations based upon a premise that they are far more difficult to implement. They may be just slightly harder to conceive, yet formulation of their details is significantly more challenging because it requires deep understanding of hard academic subjects. And I do admit that such rare breeds of serious game mechanics won't be able to attract a wide range of audiences, yet will not hesitate to assure that targeting a niche market is probably a better strategy than trying to appeal to everyone at once during this era of gaming where countless hyper-casual games have already won the heart of the mainstream. A friend to all is a friend to none.

"Oh, you are just overthinking it!", one might say. "Just keep it simple. Simple is best. Our goal is to make a game that is fun to play, not some kind of convoluted academic research."

Sure, sure, that is indeed the common sense of the public when it comes to game development. But the so-called common sense is not an everlasting gem of truth, and the good old days back in which we could leverage such a bite-sized train of reasoning to produce a game that sells well is now gone. Are you going to make yet another casual game which has a bunch of cute-looking characters running around, doing silly things, and opening up loot boxes? Cool! Now good luck competing with a million other casual games in Google Play and App Store that are similar to yours but already way more popular.

We are seeing a phenomenon in the game industry that is reminiscent of what happened to TV shows, movies, and other types of entertainment. The mainstream audience has already been dominated by large mega corporations, and most of the so-called "creative" indie game developers, who would proudly label themselves as a group of brave cavaliers on their road to fight against the mainstream culture, have hardly done anything more advanced than simply repeating their age-long rhetoric of "starving underground artists".

In order to survive as a professional game developer in this post-infantile epoch of videogames, one must be creative in a hard way - "creative" because it is one of the few weapons that an indie developer can utilize rather more efficiently (compared to corporate executives whose internal guidelines and mannerism preclude them from experimenting with wild ideas), as well as "in a hard way" because soft creativity is way too commonplace and easily replicable.

And if the practice of hard creativity requires the developer to "reinvent the wheel", the developer must be willing to reinvent the wheel in order to truly distinguish his/her game from others and stand out in a niche market. We are living in a world that is saturated with hordes of professional wheel decorators. The only way to remain as a competent indie game developer is to be able to come up with a new wheel.












:d:An article about The Sims.
:k:Sims, Sims1, Sims2, Sims3, Sims4, Customizability, Sandbox, Godgame, Maxis

[My Younger Days with The Sims] 2022

When I was a 3rd grader, back in 2002, I had a chance to play a stunningly unique videogame at the time called "The Sims". It was basically a game about life itself, in which the player could even simulate the daily routines of themselves. This "life simulator", compared to other AAA titles, was so drastically original back in those days. One could build their own houses, virtual human beings with customizable personalities, as well as their own narratives by fancying imaginary storylines over the top of the apparent gameplay.

I played The Sims for quite a long time throughout my school years, during which I tried all sorts of meta-game features of it because one of the major downsides of The Sims was that its core gameplay tended to be a bit too repetitive and boring. Those included:

(1) Downloading custom items (e.g. user-made furniture, etc) from the internet and applying them to the game,
(2) Building houses and sharing them with other players (inside a web forum),
(3) Making cartoons by taking in-game screenshots and adding captions to them,
(4) Working as a staff member in one of The Sims fan community websites (i.e. managing user accounts, etc),

and so on.

The Sims, by nature, was a highly customizable game. One could introduce new items, houses, textures, soundtracks, and skins to the game simply by adding files to the game's directory, instead of going through any extraneous processes. Hence the availability of external tools (such as SimPose) further allowed users to create their own unique contents based off of The Sims.

The Sims occupied a special place of my youth, since it served as an inanimate mentor which ultimately guided me to become who I am today. It inspired me to first explore other kindred simulation games made by Maxis, which in turn introduced me to the notion that a videogame could potentially come out not just as a manually sculpted piece of entertainment, but also as a generic "engine of the universe" upon which players could build their own narratives.

Eventually, this early experience led me to study engineering and later on become a full-time game developer.

I hadn't really had an opportunity to work on an engineering-heavy simulation game during my early career years (I mostly worked on casual mobile games), but such hidden potentials of the game industry have always been the major source of inspiration to me. This oftentimes drove me to write code that had a tendency to be overly generic (aka "abstract"), which some people probably did not like because it lacked immediate applicability in specific gameplay scenarios, yet it was never due to some form of intellectual snobbery; rather, it was due to my heart's commitment to explore as much breadth of the game's possibility space.







:d:An article about usefulness of knowledge.
:k:Usefulness, Pragmatism, Theoretical, Practical

[Usefulness] 2022

"But... is it useful for anything?"

This is a common question which arises among school students when they confront a seemingly obscure theory, such as an abstract concept in mathematics. Whenever a teacher presents the students with a new idea that is not obviously applicable to real-life examples, some of them even deny the authenticity of the education they are receiving because of this.

Some educators answer this question by providing their students with the most down-to-earth type of examples, so as to demonstrate the usefulness of the theories that they are trying to convey. American math textbooks, for instance, are usually covered with images of roller coasters, industrial robots, and other "useful" cases of mathematics in our daily life. This creates a sense of: "You must eat these vegetables in order to get healthy".

Taking pragmatic necessity as a hostage is a valid short-term strategy, and it does work in cases where a student is particularly interested in real-life applications whilst showing particular disdain towards pure theory. However, this approach introduces two major problems:

(1) Emphasis on "usefulness" hides the true beauty of the theoretical subject. By treating geometry as a mere tool for industrial design and optimization, the educator is downgrading pure theory into some kind of "technical cookbook" for specific use cases instead of preserving geometry's original source of fascination which did not rely on practical applications (e.g. Ancient Greek notion of the essence of space, as well as its implications regarding the structure of the universe).

(2) It encourages students to learn the subject in a superficial manner, oftentimes by memorizing technical rules and exercising some kind of puzzle-solving dexterity. This mode of learning has its own benefits, yet it deters students from really trying to understand the essence of the knowledge by burying them in a heap of specific case-by-case scenarios which are nothing more than reiterated versions of the same old concept. This tendency further enhances when students are exposed to a highly competitive environment, in which memorizing a bunch of problem-solving recipes is considered a far more efficient way of outperforming one's competitors than reasoning with fundamentals.








:d:An article about developing procedural narratives in games.
:k:Narrative, Procedural, Game, GameDev, IndieGame, AI, Roguelike, PCG

[Procedural Narratives] 2022

Let's say that we are creating a videogame using a procedural content generation algorithm. What shall we do to let the game's underlying software auto-generate a virtual world that is populated by meaningful contents?

It is a pretty well known observation that, using a variety of stochastic and hash-based mechanisms, one can randomly generate all sorts of patterns in space fairly easily. For instance, anyone who is well-versed in computer science would have no trouble writing an algorithm which configures a random maze based on a simple graph-oriented technique (i.e. Just make a grid of vertices and keep connecting random pairs of them until all of them are connected).

It is also fairly easy to introduce more advanced, abstract patterns to the cookbook of procedural generation. Lock-and-key mechanism, by which the maze is filled with not only corridors of obscure shapes but also with locked doors which can only be unlocked by certain types of keys, is also an option that is straightforward to implement because we can utilize graph-based logic for it (e.g. A "key node" inside the maze graph must precede its corresponding "door node" within at least 1 out of N paths that can be traversed by the player, and so on).

There are countless mathematical models from which we can derive appropriate procedural algorithms for the purpose of auto-generating any type of content we can think of, including procedural textures, procedural meshes, procedural architecture, procedural enemy waves, procedural ecosystems, and so forth.

But, can we procedurally generate narratives as well?

By "narratives", what I mean is a set of stories to tell, loaded with emotions which the player can grasp by heart and utilize as fountains of motivation. In order for the player to be motivated to play the game, one's freedom must be restrained instead of being infinitely granted under the promise: "You can do anything you want, and be anyone you like!".

Under a limited degree of freedom, the player will experience frustration due to one's inability to get what he/she wants to get and be what he/she wants to be. This sense of limitation is what fuels the person to fight against the system, for the purpose of achieving things that he/she wasn't allowed to achieve before. This is what gives emotional meaning to the gameplay. Generating a narrative means generating an emotional experience, which is something that emerges out of one's desperate struggle to pull the world out of its pit of painful imperfection and into a state of everlasting equilibrium.

In order to generate such an experience procedurally, the algorithm must first come up with a list of phenomena that the player does like, as opposed to a list of phenomena that the player does not like. One of the most obvious examples would be that the player likes to survive and does not like to die. So in this example, the player possesses two fundamental goals: (1) To survive, and (2) To avoid death. They are listed below as logical relations. They can be interpreted as: "In order to play the game, you must survive and avoid death".

#$
PlayGame :- Survive, AvoidDeath
  Survive :-
  AvoidDeath :-
#$

Now, if the game world in which the player is living is so generous in nature that the player doesn't have to do anything to survive and avoid death, the game will be meaningless. In a world in which there is infinite supply of food, shelter, and security, what is the player's purpose in life? Just to spend as much time as possible, whilst "enjoying" the continuum of this eternal peace? In this carefree state of beings, these two goals ("survive" and "avoid-death") will both be achieved instantly as soon as the game begins and stay so forever. This is a direct gateway to boredom because the player's sense of engagement originates from the process of achieving these goals, not the fact that these goals have already been achieved.

In order to motivate the player to play the game, these two goals must have their own obstacles which deter him/her from reaching them too easily. The existence of such obstacles forces the player to take a series of detailed actions, which in turn require him/her to subdivide the goals into more specific, smaller goals like the ones shown below.

#$
PlayGame :- Survive, AvoidDeath
  Survive :- Eat, Sleep
  AvoidDeath :- DodgeHazard, FightEnemy
#$

In order to survive, one must eat and sleep. And in order to avoid death, one must dodge nearby hazards and fight off enemies in sight. So we could say that "eat" and "sleep" are subgoals of "survive", while "dodge-hazard" and "fight-enemy" are subgoals of "avoid-death". This tree-like relationship among goals can potentially expand itself indefinitely in a recursive manner. If we add a new layer of subgoals, it will look like:

#$
PlayGame :- Survive, AvoidDeath
  Survive :- Eat, Sleep
    Eat :- FindFood, SwallowFood
    Sleep :- GoToShelter, LieDown
  AvoidDeath :- DodgeHazard, FightEnemy
    DodgeHazard :- FindHazard, MoveAwayFromHazard
    FightEnemy :- FindEnemy, KillEnemy
#$

Here is the interpretation of the list of statements above. In order to survive, one must eat and sleep. In order to eat, one must find a piece of food and then swallow it. And in order to sleep, one must go to the nearest shelter and then lie down. In order to avoid death, one must dodge hazards and fight off enemies. In order to dodge hazards, one must find the nearest hazard and move away from it. And in order to fight off enemies, one must find the nearest enemy and kill it.

It is pretty trivial to design a tree of goals like this manually, and so it is not an absolute requirement for us to write an algorithm that auto-generates it. All we need to do is just come up with a bunch of individual goals and relate them with one another. The question is, what to do with these goals?

Procedural realization of goals requires them to impose a certain set of rules upon the way in which the player interacts with the game world. For example, the "eat" goal should introduce a hunger-stat to the player's list of stats, so as to ensure that the player will fail to survive when this hunger-stat hits zero, and the "find-food" goal should introduce a sufficient number of random foods scattered all over the world because the act of finding food would be pointless otherwise. The "dodge-hazard" goal should introduce a health-stat to the player's list of stats, as well as imposing a rule that any object that is identified as a hazard should decrement this health-stat when touched by the player. Such rules then implicitly encourage the player to follow their corresponding goals, since the rules themselves are inclined to create a context in which the player has no choice but try to achieve these goals.

#$
if (goalTree.Contains("Eat"))
{
    player.stats.Add("Hunger");
    player.stats.OnZero("Hunger", _ => player.Die());
}
if (goalTree.Contains("FindFood"))
{
    world.DistributeRandomly("Food");
}
if (goalTree.Contains("DodgeHazard"))
{
    player.stats.Add("Health");
    player.stats.OnZero("Health", _ => player.Die());
    collision.Between("Hazard", "Player").OnStart(_ => player.DecreaseStat("Health"));
}
#$

This one-to-one correspondence between goals and their respective rules, however, is still not enough for enriching the player's goal-chasing experience. What we saw earlier was a tree of goals, rather than a set of independent goals that are completely separate from one another. If the goals are distributed as a horde of individual targets that the player is supposed to aim for but are scattered all over the place, the player is likely to be confused as to which goal to approach first. As an example, let's suppose that we simply distribute a bunch of foods, shelters, hazards, and enemies uniformly on the ground, according to the presence of the individual goals mentioned above. This setting will technically encourage the player to search for foods and eat them, occasionally find shelters and sleep in one of them, dodge hazards, and fight against enemies. But, that's it! The gameplay, as a whole, will be so blend that it will practically replace all the goals in this game with a single goal called: "Don't get bored".

Rich gameplay experience originates from a set of motivating goals which do not emerge all at once, but rather in a variety of alternative arrangements. The player may be compelled to "survive" first and then "avoid death" later, or "avoid death" first and then "survive" later. The player may be compelled to "eat" first and then "sleep" later, or "sleep" first and then "eat" later. In other words, there should be a variety of scenarios each of which assigns a unique permutation of priority levels to the tree's component goals. For example, the game should be able to introduce one of the following goal-trees in one occasion, and the other in yet another occasion.

#$
(1)

PlayGame :- Survive, AvoidDeath
  Survive :- Eat, Sleep
    Eat :- FindFood, SwallowFood
    Sleep :- GoToShelter, LieDown
  AvoidDeath :- DodgeHazard, FightEnemy
    DodgeHazard :- FindHazard, MoveAwayFromHazard
    FightEnemy :- FindEnemy, KillEnemy
#$

#$
(2)

PlayGame :- AvoidDeath, Survive
  AvoidDeath :- FightEnemy, DodgeHazard
    FightEnemy :- FindEnemy, KillEnemy
    DodgeHazard :- FindHazard, MoveAwayFromHazard
  Survive :- Eat, Sleep
    Eat :- FindFood, SwallowFood
    Sleep :- GoToShelter, LieDown
#$

These two trees have the exact same set of goals, yet they differ in orders. In the first scenario, the player is supposed to first survive and then avoid death by dodging hazards and fighting enemies. In the second scenario, the player is supposed to first avoid death by fighting enemies and dodging hazards, and then survive. In other words, they demand different orders of execution.

Order of execution among goals can be enforced through ways in which they are separated in space and time. The problem with the aforementioned "uniform distribution" implementation was that the game world was just a vast open ground upon which the player could access any location and confront any type of objects at any moment in time. This easily leads to boredom due to lack of variations in gameplay experience. As we start enforcing the structure of the goal-tree itself to the world (not just the presence of individual goals), the game becomes far more dynamic. This can be done via a step-by-step approach, where the procedural algorithm walks through the tree of goals in a recursive manner and constructs pieces of the world one by one as it moves along its way.

Let's begin with the root goal, which is "play game". This goal will be achieved when its two subgoals, "survive" and "avoid death", are achieved. What this means is that we can simply divide the game world into two spatial regions, each of which is responsible for forcing the player to approach one of these two subgoals.

#$
Top-Down view of the game world:

+-------------------------------+
|O              |               |
|               |               |
|               |               |
|               |               |
|               |               |
|   Survive     |     Avoid     |
|               |     Death     |
|               |               |
|               |               |
|               >               |
|               |               |
+-------------------------------+

(O = Player's Initial Position)
(> = Door)
#$

The result of spatial partition shown above creates a physical barrier which prevents the player from reaching the "avoid death" region before passing through the "survive" region. Now let's subdivide these two regions into yet another layer of subgoals, which are "eat -> sleep" for the "survive" goal and "dodge hazard -> fight enemy" for the "avoid death" goal. Such a partitioning process is easily achievable via recursive function calls.

#$
Top-Down view of the game world:

+-------------------------------+
|O              |               |
|               |               |
|     Eat       |     Fight     |
|               |     Enemy     |
|               |               |
|-------v-------|               |
|               |               |
|               |-------------^-|
|    Sleep      |     Dodge     |
|               >     Hazard    |
|               |               |
+-------------------------------+

(O = Player's Initial Position)
(> = Door)
#$

Here, the physical barriers are clearly guiding the player to first enter the "eat" region, then enter the "sleep" region, then enter the "dodge hazard" region, and then finally enter the "fight enemy" region. The strict partitioning of space allows this natural emergence of order between goals, without even requiring the procedural algorithm to interpret the meaning of each of them.

Now we could theoretically subdivide these four regions into yet another layer of subgoals (which would correspond to "find food", "swallow food", "go to shelter", "lie down", "find hazard", "move away from hazard", "find enemy", and "kill enemy", respectively), but the truth is that this new set of goals are no longer abstract; they are primitive instructions which are supposed to dictate the player to take specific actions (i.e. they are leaf nodes in the goal-tree). Therefore, we have finally reached the end of this recursive space-partitioning process, and are responsible for populating each partitioned region with objects which encourage the player to carry out the corresponding goal's intended list of actions (e.g. "find food" and "swallow food" for the case of the "eat" region, etc).

#$
Top-Down view of the game world:

+-------------------------------+
|O         f    |               |
|               |            e  |
|     f         |     e         |
|         f     |               |
|   f           |          e    |
|-------v-------|               |
|               |      e        |
|    s          |-------------^-|
|               |               |
|               >    h          |
|          s    |           h   |
+-------------------------------+

(O = Player's Initial Position)
(> = Door)
(f = food, s = shelter, h = hazard, e = enemy)
#$

As you can see from the figure above, a straightforward implementation would be to randomly distribute "food" objects inside the "eat" region (in order to let the player "find food" and "swallow food"), randomly distribute "shelter" objects inside the "sleep" region (in order to let the player "go to shelter" and "lie down"), randomly distribute "hazard" objects inside the "dodge hazard" region (in order to let the player "find hazard" and "move away from hazard"), and randomly distribute "enemy" objects inside the "fight enemy" region (in order to let the player "find enemy" and "kill enemy"). However, the algorithm could be more sophisticated than the one presented here, for the purpose of making the gameplay a bit more interesting. One may consider placing such objects in the form of clusters rather than uniformly scattered points, for instance. Or the partitioning process itself could be converted into a grayscale (rather than black-and-white) model, in which spatial locations blend from one region to the other in the form of gradation.

The spatial configuration presented here can be considered one of many possible instances of the player's set of goals. we can append to this game world yet another chunk of space which instantiates a variant of the same goal-tree, in which the order of goals is different from the previous one. For instance, we can divide this new chunk of space into two regions called "avoid death" and "survive" just like before, but this time in a different order ("avoid death" -> "survive" instead of "survive" -> "avoid death").

#$
Top-Down view of the game world:

+-------------------------------+-------------------------------+
|O         f    |               |                               |
|               |            e  |         Avoid Death           |
|     f         |     e         >                               |
|         f     |               |                               |
|   f           |          e    |--------------------------v----|
|-------v-------|               |                               |
|               |      e        |                               |
|    s          |-------------^-|                               |
|               |               |             Survive           |
|               >    h          |                               |
|          s    |           h   |                               |
+-------------------------------+-------------------------------+
#$

We keep recursively subdividing this new chunk of space, where the general procedure is exactly the same but the order between subgoals can potentially differ.

#$
Top-Down view of the game world:

+-------------------------------+-------------------------------+
|O         f    |               |                  |            |
|               |            e  |      Fight       |   Dodge    |
|     f         |     e         >      Enemy       >   Hazard   |
|         f     |               |                  |            |
|   f           |          e    |--------------------------v----|
|-------v-------|               |        |                      |
|               |      e        |        |                      |
|    s          |-------------^-|        <                      |
|               |               | Sleep  |        Eat           |
|               >    h          |        |                      |
|          s    |           h   |        |                      |
+-------------------------------+-------------------------------+
#$

In the case above, for instance, the "fight enemy" subgoal comes before the "dodge hazard" subgoal instead of after.

#$
Top-Down view of the game world:

+-------------------------------+-------------------------------+
|O         f    |               |         e        |  h        h|
|               |            e  |                  |      h     |
|     f         |     e         >      e           >       h    |
|         f     |               |             e    |            |
|   f           |          e    |--------------------------v----|
|-------v-------|               |    s   |                      |
|               |      e        |   s    |       f              |
|    s          |-------------^-|        <                    f |
|               |               |        |    f                 |
|               >    h          |    s   |          f           |
|          s    |           h   |        |               f      |
+-------------------------------+-------------------------------+
#$

The end result presents the player with quite a variety of goal sequences. Sometimes the player will face enemies after hazards, as opposed to hazards after enemies, and sometimes the player will be forced to survive after being forced to avoid death, as opposed to being forced to avoid death after being forced to survive. And so on.

Even this partition-based approach, however, quickly gets old as the player traverses the game world. The original set of narratives, which supposedly involve emotionally appealing elements of volition such as survival and death, quickly degrades into a repetitive maze of random noise, and it is rash to assume that the player won't notice it after hours of play.

A brute-force solution to this is to design a gigantic goal-tree that is so large, that it will take an unreachable duration of time for the player to experience sufficiently many variations of it and recognize a sense of repetition. This, however, will pull us further and further away from a purely procedural approach because the goal-tree itself is manually designed.

A subsequent conclusion, therefore, would be that the procedural algorithm somehow needs to be able to automatically construct the goal-tree itself in large scale (possibly infinite), in order to let us scale up the game's narrative space without putting massive amounts of design work. Achieving such level of automation will require the algorithm to be intelligent enough to be able to come up with brand new types of goals under minimal human intervention.

This is an interdisciplinary area of research which needs collaboration of individuals who have ideas on how to quantitatively measure and reproduce narrative elements. And this, I think, can only be realized through deep understanding of human nature.







:d:An article about GPU-based cellular automata.
:k:GPU, Parallel-Computing, Shader, CUDA, Automata, CA, Compute-Shader, Cellular-Automata

[Parallel Adjacent-Cell Modification Support for General-Purpose Cellular Automata] 2022

The Cellular Automata (CA) model is useful for many applications, such as grid-based videogames, integrated circuit simulations, ecological simulations, particle simulations, and so on. One major limitation of a typical CA system, however, is that each cell is only allowed to modify its own state. This is not a problem when we are dealing with a simple mathematical thought experiment such as Conway's Game of Life, but can really turn out to be a serious bottleneck when we try to establish some form of "Conservation of Matter" in CA, in which an object simply transfers from one location to another instead of allowing itself to be created/destroyed.

<001_01>

There are two possible methods of logic for a CA system, which are shown above. The first one is the standard CA logic that can easily be implemented as a shader (or any other equivalent parallel-processing) program, and the other one is a modified CA logic which allows each cell to modify the state of its neighbors, not just its own. This lets us simulate the movement of discrete objects, since a "movement" is nothing more than a simple data-swap between two adjacent cells.

Allowing each cell to simultaneously modify its neighbors, of course, has its own drawbacks. If we allow two adjacent cells to concurrently update their own neighbors, we will be facing race conditions within these two cells. If we allow two cells that are separated by only one other cell to concurrently update their own neighbors, we will still be facing race conditions within this in-between cell.

If we allow two cells that are separated by TWO other cells instead of just one, however, we won't experience any race conditions between them because there will be no way for them to modify the same cell at once.

<001_02>

This means that, in order to let every cell modify its neighbors in a concurrent manner, we must slice the parallel update routine of the CA into 9 different modes, each of which contains one of 9 unique sets of cells that are separated by at least 2 other cells between them. This ensures that absolutely no race condition can happen during any of these 9 modes, since no pair of cells will have a chance to touch the same exact neighboring cell.

<001_03>

Updating the entire CA grid, then, will require the program to execute all of these 9 modes in a sequential manner during each full update cycle. A simple design is to run these modes in a numerically ascending order, such as: [1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9]. However, such a fixed order may introduce "biases" to the system, causing side effects such as object movements always tending towards certain directions, etc. Therefore, it is much more desirable to shuffle the order of these 9 execution modes after each full update cycle of the CA, so as to "average out" such potential biases.

<001_04>

The aforementioned method can be implemented as a shader program pretty easily. All we need is a pair of shaders, one for issuing "update-commands" based on the current state of the cell and its neighbors, and the other for interpreting these update-commands and applying the appropriate state changes to the cell as well as its neighbors. The CA cell's state can be encoded as a pixel value (32 bits for a standard RGBA texture), and each update-command's content (i.e. opcodes and their parameters), too, can be encoded as a pixel value (32 bits for a standard RGBA texture).

<001_05>

For a more optimized implementation, we will need a piece of customized hardware which is designed like the one shown below. Here, the system enters the index of the parallel-execution mode as the input parameter, and the hardware uses that index to activate only 1 out of 9 groups of cells and their neighboring update-command ports. Each "cell module" has its own logic processor which determines the future state of itself and its neighbors, based upon the current state of itself and its neighbors.

<001_06>

<001_07>





:d:An article about whether knowledge can ever be considered useless.
:k:Knowledge, Education, STEM, Academia

[Useless Knowledge?] 2022

One thing I have learned throughout my academic years is that there is no such thing as "useless knowledge"; it is only the circumstance which puts certain types of knowledge into a temporary state of coma.

In today's job market, people who majored in literature when they were in college generally have much lower chances of landing on a job than, say, those who majored in STEM subjects such as math, science, and engineering. Yet, can we really say that studying literature is intrinsically useless by any means, just because it is not in sync with today's market demand?

What if somebody suddenly invents a revolutionary AI robot that is capable of replacing all existing industrial tools and can only be programmed by writing source code in the form of literature instead of programming languages? I daresay this is probably not going to happen any time soon, but if we ever get a chance to see that happen, the vast majority of software engineers who are more fluent in speaking C++ than plain English will be screwed.

Job recruiters will start asking if whichever candidate they are looking forward to hire as an intern possesses "+10 years of professional experience in classical literature", or has "either a Bachelor's or Master's degree in creative writing". Teenagers and young adults will be labelled as delusional dreamers whenever they say they want to become a programmer. The ability to code will be regarded as such an embarrassingly juvenile skillset, that it will even be disadvantageous for a job applicant to list it in one's resume.







:d:An article about the nature of debate and distortion of reality.
:k:Reality-Distortion, Debate, Verbal, Discussion, Politics, Political-Narratives, Extremism

[Verbal Debate] 2022

Verbal debate is oftentimes considered the most ideal form of communication among individuals who disagree with each other, especially in western civilization.

I do understand why this is so, for a couple of obvious reasons. When people are directly speaking to one another face-to-face, they can read each other's facial expressions and body languages, as well as various phonetic nuances that cannot be conveyed through written language. Also, the nature of speech keeps things concise and direct, allowing arguments to be settled in a more decisive manner than through a painstaking back-and-forth exchange of written words. Yet, I would like to suggest some of the downsides of this medium of communication.

Some highly opinionated gentlemen, who would rather identify themselves as cross-bearers of their own side of the political spectrum than as individuals who possess their own independent thoughts, often claim that today's society is raising a generation of indoctrinated snowflakes who have lost every ability to engage in a "healthy conversation", due to their ever-growing habit of perpetually reiterating their own dogma inside their own circle of kindred minds.

These honorable patriots, who somehow happened to acquire the most profound wisdom of the universe despite having the privilege of spending their younger years during the most prosperous epoch of the most prosperous state of the entire human history, back up this claim by coming up with video footages of young college students who refuse to fully participate in a face-to-face "political conversation" which suddenly popped out of nowhere in the midst of a random campus area. Such "evidences" of the incompetence of today's young intellectuals, for sure, are not difficult to obtain because the ones who started off such a seemingly random debate are the ones who were the most meticulously prepared for it, while those "spoiled kids" just happened to be on their way to their next lecture in which they were about to focus their mental energy on their mission to carry on the legacy of their older generations.

I am personally not a fan of verbal debate not necessarily because I am not particularly talented in speech, but because its original purpose can be severely distorted due to many factors. Unless every participant of a verbal discussion is well prepared for its subject, gentle enough to not cut off others while they are speaking, careful not to judge the other speaker's intellect based upon his/her voice, accents, and speed of verbal articulation, as well as generous enough to understand that it is not always about "winning an argument", it is a matter of time until the whole conversation degrades into some kind of superficial dexterity competition, in which whoever comes up with a series of most immediately convincing arguments as quickly as possible is considered the greatest speaker (regardless of whether or not they really turn out to be valid arguments when analyzed later on).








:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Extraterrestrial, Outerspace, Lacerta-Files

[Alien Job Interview - 1] 2022

<001_08>

Alien Job Interview

Chapter 1: The Alien

(PERSONAL NOTE)

By the time I saw this alien creature standing in front of my HR office, I had already conducted hours of research regarding the nature of his kind. He belonged to one of the most obscure species of the IT industry, formally classified as "engineers".

Mr. Cavitt told me to be in charge of this first job interview, since I was the only person in the management team who was able to comprehend this creature's tech-talk.

The way this alien being communicated with others was so awkward, yet strangely direct and powerful whenever he was explaining to others anything computer-related!

In spite of the fact that I could not understand most of the technical jargons he happened to be passionate about, I have always felt that the alien did not possess even a tiny bit of social skill to let him realize that I do not care about those things. This helped me do my job as a recruiter because it allowed me to make him keep talking about his tech stuff while I was just pretending to be interested.

I refer to the alien as "he", but the being wasn't really sexual in any way. "He" did have a rather brute mood of masculine indifference, yet in terms of physiology, the being was nearly asexual because its reproductive organs were negligibly small (probably dysfunctional, too). This was understandable because the inability of his kind to reproduce is a core mechanism of rarity which secures the high pay range of engineers.

His body was more like the body of a "robot" than a human being, whose anatomical features were optimized for minimal social interactions. His head was disproportionately large and flat, while his arms/legs were so pitifully short and feeble. His eyes resembled those of classical Victorian pinhole cameras.

His name was "Airl", which was not really his original name but nevertheless given by me because it was easier to spell and pronounce.








:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Spacecraft, UAP, Spaceship

[Alien Job Interview - 2] 2022

<001_08>

Alien Job Interview

Chapter 2: My First Interview With The Alien

(PERSONAL NOTE)

Over night, before my first job interview with the alien, our office space had been transformed into a dark room filled with cheap beer cans and gaming PCs. There were a dozen men working on setting up sci-fi themed LED lights, and the CEO who coordinated this whole process to make sure that we give the alien an impression that we are an innovative startup company.

I was informed that a group of IT executives were to review my interview after each meeting, for the purpose of assisting with my efforts to communicate with the alien.

(OFFICIAL TRANSCRIPT OF INTERVIEW)

Me: "Tell me about yourself."

Airl: "I am a digital nomad, inventor, and engineer;"

Me: "Since you are a digital nomad, do you enjoy travelling abroad?"

Airl: "No, I am a digital nomad in cyberspace. I travel from website to website;"

Me: "Do you have any special environmental needs, such as unlimited supply of healthy vegan meals, open lounge with fluffy cushions and fake grass for creative social engagement, or weekly athletic activity with coworkers?"

Airl: "No, I am a coder with no life;"

Me: "Are you going to need PTO or work-life balance?"

Airl: "I have no life to balance;"

Me: "How do you programmers communicate with one another?"

Airl: "We do not communicate;"

Me: "How do you work as a team, if you do not communicate?"

Airl: "We do not work as a team; We just echo whatever our manager is currently up to;"

(PERSONAL NOTE)

At this point, I asked Airl to give me a break and exited the interview room to talk to the IT executives. When they realized how little progress I made during this first part of the interview, they were deeply agitated and started to demand that I should have asked Airl if he is okay to work as an intern instead of a regular contractor. I told them that, since the alien was socially awkward and possessed near zero ability to interact like a human, it would be unrealistic to expect a meaningful answer from him (aka "Yes") unless I knew at least one of his weaknesses I could exploit.







:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Flying-Saucer, Astrobiology, Supernatural

[Alien Job Interview - 3] 2022

<001_08>

Alien Job Interview

Chapter 3: Social Skill Lessons

(PERSONAL NOTE)

My first half of the interview with Airl was an utter failure, according to the IT executives. Fortunately, a very clever fellow named John Newble, who was a Nerdpsychology specialist from a nearby university's Department of Therapeutic Astrobiology, had a solution to the problem.

He explained that the reason why I could not assert my dominance over the alien was that he lacked basic social skills to realize how utterly insignificant he is compared to the ego of our top directors.

Therefore, he suggested that we had only two options. Either I had to learn the alien's coding skills in order to assert my dominance over him in the field of tech, or the alien had to learn our social skills to make him understand that it is all about politics and rules rather than being smart with those big ass calculators. Factually, only the second option was possible because I didn't want to learn coding just to hire a code monkey.

Thus we began to conduct our own social skill lessons for Airl. We asked our community manager to bring us as many children's books as possible for the purpose of teaching him that a full English sentence is supposed to end with a period instead of a semicolon.

After reading out loud a series of fables and biblical stories to the alien, I began to teach him how to engage in small talk, chit-chat about things that are not technical, exchange business cards with smile, shake hands without awkwardness, and last but not least, show vivid reactions with lots of hand gestures whenever somebody says something emotional.

Airl was not happy to adopt these rules of social interaction, but later on he somehow managed to pretend at least that he was a human being with a functioning soul.








:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Outer-Space, Alien-Planet, Space-Opera

[Alien Job Interview - 4] 2022

<001_08>

Alien Job Interview

Chapter 4: Airl's Disclosure

(PERSONAL NOTE)

During my lessons, some of the IT executives interfered several times to ask Airl a bunch of questions regarding his willingness to accept whichever pay range they offer, work overtime without compensation, and show other marks of loyalty to prove that it makes sense for us to hire this alien instead of just outsourcing those of his kind in India. Airl refused to answer them, which suggested that he belonged to one of those notorious subspecies of the engineering race called "The Millennials".

After going through 20 or more short lessons on how to behave like an adult who has family and life, Airl suddenly stopped me and said, "I am ready to speak now". Thus our new interview began.

(OFFICIAL TRANSCRIPT OF INTERVIEW)

Me: "What would you like to say, Airl?"

Airl: "I have been part of the Domain's Expeditionary Development Team for the last several years. Before I became part of the Domain, I worked as a junior programmer in the Old Empire. I have not personally had intimate contact with "social" beings like you throughout my whole career. It is not my primary function to interact with people who do not talk in 1s and 0s. I am a digital nomad, inventor, and engineer, with many duties to perform. Although I am fluent in 347 programming languages practiced by the Domain, I have not been exposed to your esoteric language called "Plain English".

"Shortly after I left the Old Empire, I was trained and served as a researcher, data analyst, and software development officer for the Domain. We were an independent group of ambitious developers with the goal of replacing the reign of the Old Empire and their toxic work environment."

Me: "... Okay. Will you answer questions from the IT executives now?"

Airl: "No, I will not answer questions. I will provide information to you that will show you why I am totally not desperate to get a job now, and that you will probably miss out someone irreplaceable if you do not offer me a 7 figure salary".







:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Space-Alien, Extraterrestrial, Telepathic

[Alien Job Interview - 5] 2022

<001_08>

Alien Job Interview

Chapter 5: The Domain

(PERSONAL NOTE)

Airl told me his reasons for contacting my company in the first place. He was sent by the Domain's accountant to see if he could get a job somewhere else, so as to let them get rid of one of their major budget sinks. Their office was located inside their CEO's mom's basement, in which they wrote a whitepaper explaining why they have a cutting-edge IT solution destined to fix every customer's first world problems. Their paper contains flat clipart images of dancing 2D business people, so it must be authentic.

Airl also told me that each member of their studio, the Domain, is called an "IS-BE" (short for "Introverted and Sensitive BEing"). Unlike humans like myself who need daily 3-hour meetings for any meaningful execution of business, IS-BEs are capable of somehow collaborating with one another without any explicit communication, other than occasional passive-aggressive remarks exchanged through Slack. This technically makes them telepathic beings.

At first I could not trust the authenticity of his career, since the Domain was not even registered as a business by any legal means. Sensing my doubt, this alien pulled up his phone and began to scroll through his Instagram posts (This further enhanced my conviction that he really belonged to those Millennial subspecies). And suddenly he pointed his finger at my phone and said, "Be my follower!"

Immediately, I realized that my phone's Instagram account became a follower of his, and my phone began to display pages after pages of Airl's personal posts! I was able to see the photos of him working with his triple-monitor desktop in his San Francisco apartment, eating a bucket of avocado salad in San Jose, and coding on his laptop while commuting to Mountain View.

I will never forget this striking moment of discovery. Apparently he lived in California, which means he must be up to something big in the tech industry! It also cleared up the question of whether he really had more than 10 years of professional experience in front-end web development.






:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Psychic, Telepathy, IS-BE

[Alien Job Interview - 6] 2022

<001_08>

Alien Job Interview

Chapter 6: A Brief Ancient History

(PERSONAL NOTE)

After a month of ghosting which was intended to make the alien desperate enough to accept any level of salary we were going to offer, we invited him yet again for the next job interview. One of the IT executives placed a 3D puzzle toy on the floor of the room prior to the interview, in order to see if the candidate was creative enough to find and solve it without being told to do so. When Airl entered the room, he picked it up and put it into the trash can.

(OFFICIAL TRANSCRIPT OF INTERVIEW)

Me: "What kind of value do you think you can bring to our company?"

Airl: "Before you can understand my value, you must first understand the nature of software development. Coding is not an activity which involves intelligence. The so-called "development framework" is nothing more than a heap of arbitrary rules devised to make it extra challenging for newcomers and discourage them from climbing up the corporate ladder, and the amount of work done by each code monkey is measured by its ability to interpolate its head between a pair of mutually contradictory design ideas that came out of the same guy's head.

"When I was living in San Francisco, I was a full-time employee of the Old Empire. The Old Empire is a tech giant in Silicon Valley which has its own campus stadium filled with transparent fridges and salad bars. Only IS-BEs (Introverted and Sensitive BEings) are allowed to be part of the Old Empire's development team.

"Whenever a new IS-BE enters the territory of the Old Empire, it automatically gets trapped by a special installment called the "micromanagement force screen". This powerful device puts the IS-BE into an invisible soul prison made out of a golden cubicle, in which it receives an electric shock that is millions of volts high. This shock permanently erases all personal dreams, passion, and beliefs of the IS-BE, and puts it into a "brainwashing" process during which the Old Empire's prison system injects a series of technical guidelines and code of conduct directly into the IS-BE's soul."








:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, IS-BE, Immortal-and-Spiritual-Being

[Alien Job Interview - 7] 2022

<001_08>

Alien Job Interview

Chapter 7: The Old Empire

(OFFICIAL TRANSCRIPT OF INTERVIEW CONTINUED)

Airl: "There are two classes in the Old Empire's corporate hierarchy: rule-makers and rule-followers. Once captured and treated with an electric shock, a new IS-BE of the Old Empire immediately becomes a rule-follower and is destined to work as a slave of the rule-makers for the rest of its life. No matter how much it achieves and how intelligent it gets, an IS-BE will never receive a permission from the Old Empire to be promoted to the position of a rule-maker.

"The reason is simple. Those who are in charge of making rules are always the ones who are the most knowledgeable of those rules, while those who are in charge of following the rules are always the ones who have to pay extra effort to keep themselves in sync with those rules.

"Whenever a rule-maker senses that a rule-follower is trying to climb up the corporate ladder and threaten its noble status, all it has to do is simply come up with a new set of rules that the rule-follower will have to waste their extra time on in order to avoid violating the Old Empire's first commandment: "Don't do anything we haven't told you to do". Whenever an IS-BE breaks even a tiny rule established by the Old Empire, it automatically receives another electric shock from the force screen for rehabilitation.

"Inside the Old Empire's class system, an IS-BE's attitude, personality, intellect, and insight do not matter at all. No matter what an IS-BE does, it will never be able to escape the Old Empire's force screen unless it learns the aggressively concealed truth that everything ultimately boils down to politics and power struggle.

"The Old Empire has been a dumping ground and prison for 'untouchables', most of whom are recent college graduates desperately looking for unpaid internship. Electronic monitoring points of the Old Empire, which are responsible for creating force screens, detect and capture IS-BEs as soon as their college instructors stop breastfeeding them."







:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Company-Politics, Old-Empire, Domain, Sci-Fi

[Alien Job Interview - 8] 2022

<001_08>

Alien Job Interview

Chapter 8: The Prison System

(OFFICIAL TRANSCRIPT OF INTERVIEW CONTINUED)

Airl: "The heart of the Old Empire's prison system is a gigantic pyramid located at the center of their territory. This is the place to which every IS-BE is required to submit their daily work, which consists of full reimplementation of the same exact design concept that was slightly modified at the end of the previous day's last business hour. The top priest of the pyramid scans each IS-BE's code changes with his ankh, and makes sure that every design specification is satisfied to the utmost degree.

"This pyramid workflow was intentionally created as part of the IS-BE prison system. The pyramid is alleged to be the symbol for "professionalism". However, the "professionalism" of the Old Empire is intended to operate as part of the elaborate micromanagement "trap" consisting of MASS, MEANING, and MYSTERY.

"The colossal MASS of the pyramid gives an impression that this big-tech company is creating a large-scale community where everybody lives in harmony and works together as a team. Behind this grandiose facade of techno-utopia, however, the only real "community" is the power game being played among the Old Empire's shareholders.

"The MEANING behind the engineering standards of the pyramid is nothing more than a fabricated illusion. There is nothing meaningful about the particular services, plugins, or coding languages they insist on using; such nitpicky details are forced upon the IS-BEs not because those are fundamentally superior to other technical frameworks, but because their persistence helps secure the jobs of those who stayed in the pyramid long enough to memorize them all.

"The sense of MYSTERY advertised by the Old Empire's marketing team has been distorting the reality of the mainstream media. This makes their customers believe that, whenever the Old Empire copies an ancient technology and rebrands it with their allegedly "creative" design hidden behind a series of mysterious teasers, quotes, and obscure hints scattered all over the place, they become the original inventor of the technology."






:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Ancient-Aliens, Job-Interview, Office-Space

[Alien Job Interview - 9] 2022

<001_08>

Alien Job Interview

Chapter 9: A Special Treatment

(PERSONAL NOTE)

After listening to Airl's stupidly long rant, I began to believe that this alien may belong to one of those "Boomer" subspecies of the engineering race instead of the Millennials. His tendency to go on forever talking about his own "wisdom" gained from his boring old days annoyed the hell out of me. Since I was a professional recruiter, however, I made sure to keep smiling during the whole interview session whilst displaying a series of passive-aggressive gestures to let him realize that I don't care about his story at all.

Shortly after the first half of the interview, I submitted my transcript to the IT executives. They read it and were deeply annoyed by the fact that this alien even dared to express his own opinion. They immediately reported this act of offense to the CEO, who responded by saying that he will take control of the rest of the interview.

A few minutes later, the CEO entered the interview room and sat in front of Airl.

(OFFICIAL TRANSCRIPT OF INTERVIEW)

CEO: "In case you don't know yet, our team is a group of open-minded innovators who think outside the box and are not afraid of questioning things. We value creativity and imagination, and encourage every individual to speak up, challenge the norm, and create impacts on our journey to make this world a better place. In order to see if you are a good fit, let me ask you one question. What is the most creative color?"

Airl: "Green."

CEO: "You are probably thinking that way because schools in your home planet taught you so. An open-minded, innovative individual would've said something that sounds more creative, like "magenta". But anyways, I will give you another chance to prove yourself that you are an active thinker and not the type of coder who sits on his desk all day long, only doing what he's told to do. Are you working on any open-source projects?"

Airl: "I do work on a project, although it is not open-source."

CEO: "Can you describe it to me?"

Airl: "It is a plan to destroy your planet."

CEO: "Ha, I got you!"






:d:A parody novel of the original book, Alien Interview.
:k:Alien-Interview, Area-51, Alien, Roswell, Airl, UFO, Parody, Novel, Science, Fiction

[Alien Job Interview - 10] 2022

<001_08>

Alien Job Interview

Chapter 10: Airl's Real Identity

(PERSONAL NOTE)

Everyone in the interview room was shocked to hear Airl's confession. Apparently, applying for a job was not even his primary goal. He was just living in California as an undercover code monkey, while secretly devising his plan to destroy planet Earth.

"So, this is your true identity! I knew it, I knew it the moment I saw you had balls to bring your flying saucer to my office building and occupied 5 parking spots at once without paying extra fees!" said the CEO.

"Oh, you humans are too quick to notice," said Airl. He opened up his jacket and revealed his waist belt, which was made up of a chain of coke and mentos bottles arranged in an alternating pattern.

"You ruined my plan. All I needed was to get an admin access to Boeing's GitHub repository to screw all your skyscrapers, after visiting the White House to publicly announce my will to annihilate your civilization," said the alien. Without hesitation, he pulled a colorful laser pistol out of his pocket and pressed one of its buttons. A series of crazy sound effects began to play, while the tip was emitting beams of rainbow.

"Kill him!" cried the CEO. A security officer pointed a Glock at Airl and fed his chest a couple of cone-shaped metal pieces, which the alien didn't seem to appreciate.

Airl suddenly grabbed my company laptop, made a couple of gymnastic movements to escape the interview room, and began to run towards his flying saucer which was parked right outside of the office. Another officer who was waiting in the parking lot saw him and pulled the plug out of the saucer's fuel tank to drain oil from it.

"Nice try, but mine is a hybrid model," chuckled Airl, leaping onto the top of the saucer.

"Quick! The alien is trying to steal our confidential tax info!" exclaimed the accountant, but it was too late. The alien's flying saucer already took off and swiftly zoomed through the air.

A split second later, a loud buzzing sound struck everyone's eardrums like a thunder. Electric poles near the parking lot tumbled over the grass whilst emitting brief sparks of high voltage. The flying saucer lost its velocity, crashed onto the ground, and burned. Apparently it crossed the power lines and was electrocuted.








:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Game-Script, Narrative, Cinematic, Dramatic

[The Island of Infinite Treasures - 1] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 1: Introduction
--------------------------------------------------------

(Intro music begins. A genderless gray humanoid suddenly appears in front of the player.)

Gray Humanoid: "Are you male or female?"

Player: "Male."

(The humanoid turns into a stunningly beautiful girl with blond hair.)

Girl: "Welcome to The Island of Infinite Treasures. As an NPC whose only purpose in life is to serve you as a loyal servant, I am thrilled to announce that you are the only hero in this universe who can save every one of us from acting out the most tragic-looking cinematic cutscene you will ever be able to watch in this game."

(Wind blows dramatically.)

Girl: "Since you are a gamer who was brave enough to squander a significant amount of money for a mere piece of entertainment, I am sure that you are not a fan of long intellectual conversations. So please let me skip all the subtle narratives and jump right into the most immediately fascinating part."

(Flashback begins. The girl frantically shakes her head in order to demonstrate the game's realistic hair physics.)

Girl: "Once upon a time..."

(A caption appears at the bottom of the screen. The girl hurriedly snatches it and dumps every one of its alphabets in a nearby recycling bin.)

Girl: "Oh, I'm sorry. I know you hate reading because you are a gamer. Please let me continue."

(The girl frantically shakes her head again, this time with a sparkling visual effect. The screen fades out and starts to display a dark mountain.)







:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, Play, Narrative, Script

[The Island of Infinite Treasures - 2] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 2: A Tragic Backstory
--------------------------------------------------------

Girl: "Once upon a time, there was an evil creature living on top of the mountain."

(Camera zooms towards the top of the dark mountain. A series of thunderstorms illuminate the whole mountaintop area, revealing a luxurious casino lounge hidden behind the dancing bushes.)

Girl: "This creature made enormous profits out of his own private casino."

(Camera zooms into the casino's interior, in the middle of which a nauseatingly ugly-looking monster is standing. He is smiling with the nastiest facial expression one can dare to envision, while holding a handful of golden coins and sniffing them voraciously.)

Girl: "This evil creature forced every visitor to give him a golden coin every time they wanted to play one of his slot machines. Can you imagine it? We only wanted to have some fun, yet he ruined it by making us pay for it."

(The girl begins to sob. A sad violin piece aids her heartbreaking expression of sorrow.)

Girl: "He even dared to put an advertisement of his casino at the center of the island's largest shore, ruining the view of this beautiful island."

(The girl sobs louder. Music intensifies.)

Girl: "This is the reason why we need you. You are the CHOSEN ONE. You are the only hero in this island who can save the world by defeating this heartless lifeform who stole everything from us. Once you kill him and dissect his belly, all the treasures he had swallowed will come out and make us wealthy again. We will honor you with the fanciest-looking visual effects we can afford to display!"

(Camera zooms out. The flashback ends by displaying photos of children who are starving because the evil creature didn't donate his money to charity.)








:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, Treasures, Rewards, FTUE, Player

[The Island of Infinite Treasures - 3] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 3: The Chosen One
--------------------------------------------------------

(The girl opens up her handbag and reveals a trophy, which she hands over to the player while bowing down as politely as possible.)

Girl: "Here, please take this trophy. You saved our developers right before the moment of death from starvation, by paying 10 bucks to purchase this game. Your heroic act will never be forgotten, and in order to commemorate this historical event we decided to raise a golden statue of yours."

(The girl points to the nearby plaza, upon which the player's gigantic golden face shines like the Sun.)

Girl: "You are this island's last hope. You are the only one who can save all of us by killing the evil creature. Please press any key to continue!"

(Several seconds elapse without a key press.)

Girl: "... Since you are a gamer, I might have overestimated your attention span. So please let me reiterate this story in a more concise manner."

(The girl pulls out an iPad from her handbag, upon which a short phrase is written in bold uppercase letters. The girl reads them out loud, while pointing each individual letter with a red stick equipped with a pulsating LED light.)

Girl: "KILL- ENEMY! GET- REWARDS!"

(Player finally figures out where the "any" key is located on his keyboard and presses it. The girl starts to clap, dance, and surrounds herself with colorful fireworks for the purpose of celebrating the player's ability to comprehend the game's incredibly sophisticated narratives.)

(Popup Message): "Achievement unlocked - You know how to follow a storyline!"








:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, Gameplay, Features, Glitches, IndieGame

[The Island of Infinite Treasures - 4] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 4: The Journey Begins
--------------------------------------------------------

(Camera zooms out. An infinitely wide sandbox appears in front of them.)

Girl: "This is an open-world game furnished with endless possibilities. Please feel free to explore, be yourself, and don't be afraid to be creative. I am so excited to see all sorts of amazing creations you are going to come up with, while you are travelling!"

(Player spends the next 4 hours walking across the sandbox.)

(Popup Message): "Achievement unlocked - You know how to walk!"

(After the period of fully immersive next-generation gaming experience, the player and the girl finally find themselves in front of a castle's entrance.)

Girl: "This is where your journey truly begins. Before entering this home of adventure, please let me show you a cutscene which..."

(Player skips the cutscene. The girl immediately puts her DVD player back inside her handbag and opens up the castle's entrance door.)

(Camera cinematically enters the castle and slowly rotates to reveal its main lobby. The lobby's inner walls are studded with gigantic oriental-looking red dragons as well as a cartoon painting of a chopstick warrior wearing a cone-shaped hat.)

Girl: "Please take a look at this place and admire its diversity. We are so thrilled to show you how open-minded our developers are."

(Camera follows the staircase and enters the second floor's toilet room.)

Girl: "If you happen to visit this castle's toilet while looking for Easter eggs, please don't be alarmed if the toilet seat flushes itself with pink squares instead of water. Our development team's full-time toilet VFX artist just quit his job a week before the game's release, and we had no time to buy a spare artist."








:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, Achievement, Fictional-World, Gameplay-Script, Game-Writing

[The Island of Infinite Treasures - 5] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 5: The Warrior
--------------------------------------------------------

(Player and the girl walk upstairs and enter a closet room. A shiny knight armor reveals itself in front of them.)

Girl: "Please allow me to have an honor to dress you up with my hands. Manual labor is reserved for unworthy peasants like me. A rich, highly educated gentleman like you, who graciously spent 10 bucks to purchase this game, should not be compelled to move his finger an inch."

(A sequence of mildly suggestive animations play out, each of which is carefully designed not to let the game be rated something other than "E".)

(Popup Message): "Achievement unlocked - You found out where the closet room is!"

(Shiny beams of light emanate from all over the player, who is now fully dressed up. His hair turns blond.)

Girl: "You are now a mighty warrior, the only hero in the universe who can handle this special weapon I'm going to show you."

(The girl points at the nearby pedestal, upon which a shiny credit card is laying majestically. Camera zooms in, revealing the phrase: "Legendary Membership" written on its front side.)

Girl: "This enchanted credit card will equip you with the ability to afford anything you want, with additional savings and other unlimited benefits. All you need to do is just swipe it!"

(Player puts his hand upon the card. A dramatic whirlwind surrounds the player and emits vivid sparkles of light, creating a visual proof that this credit card is not being forced to be owned by the player without a consent.)

(Player makes a swiping gesture with the card. Without hesitation, a truckload of cookies appear out of thin air and pile up before the player.)








:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, UI, Manual, User-Experience, Tutorial

[The Island of Infinite Treasures - 6] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 6: The First Dungeon
--------------------------------------------------------

(The girl cheers at the pile of cookies. She starts grouping them by dozens and putting them in sandwich bags.)

Girl: "Great job! You just unleashed your hidden potentials. Swipe it as many times as you want!"

(Player swipes the credit card multiple times in rapid succession, flooding the entire castle with cookies. Some cookies begin to disappear for the purpose of keeping the game's framerate above 30.)

(Popup Message): "Achievement unlocked - You just won our premium reward membership-"

(Player turns off popup notification.)

Girl: "Now that you have limitless power on your hand, you are ready to begin your heroic journey. Please follow me; I will lead your way to the dungeon."

(The girl pushes the closet aside and reveals an elevator door. The word "Tutorial Dungeon" is shown on the elevator's floor display.)

(The girl presses the elevator's call button with the most femininely suggestive demeanor that the animator could possibly wrap his naughty head around to devise. For the fear of overestimating the average gamer's attention span, the elevator skyrockets right up to the closet's floor within a split second and signals its arrival with a loud ringing noise. The elevator door opens.)

Girl: "This ancient relic was hidden for thousands of years, which revealed its existence only an hour before you arrived here. This means the whole universe has been waiting for you."

(Player and the girl walk inside the elevator. As soon as the door shuts down, the elevator rapidly plunges down and arrives at one of the commercial dungeons located on floor B5.)







:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, DHMIS, NPC, Narrative, Writing, Foreshadowing

[The Island of Infinite Treasures - 7] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 7: Something Not So Mainstream
--------------------------------------------------------

(As soon as they enter the dungeon's reception room, the girl kneels on the carpet and kisses the player's hand with a light bow.)

Girl: "As a clueless NPC, I have been awaiting for a master like you whom I could depend my life on. I will never forget those 10 bucks you have so generously handed over to us. And because of this, I owe you every bit of obedience my heart can ever commit to offer."

(The girl, still kneeling down, opens her handbag and hands over another trophy to the player. The phrase "Participation Award" is engraved on its lid.)

Girl: "This is a small gift of gratitude we have decided to have an honor to present you. No word would be rich enough to depict the incredible level of patience you have been showing us by still playing this game without immediately visiting Steam to post a negative review."

(The girl suddenly blushes her face and bursts into tears of joy.)

Girl: "You are a man of great virtue, who-"

(Player skips the monologue.)

Girl: (Standing up), "Thank you for allowing us to share your social security number."

(Suddenly the camera shakes itself violently and tilts in an awkward angle. Its point of focus shifts from here to there, creating a grotesque sense of vertigo.)

(A ghastly figurine, which resembles a completely random concoction of creepy-looking dolls and toy parts, appears out of nowhere and screams like a mad cat. It then disappears and the camera resumes its normal state.)

Girl: "Oh, I'm sorry if you are confused. It was a mysterious foreshadowing element intended to convince you that this game is hiding a profound secret which you will miss and regret if you stop playing."







:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Payment, Challenge, Puzzle, Pay-to-Win

[The Island of Infinite Treasures - 8] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 8: An Intellectual Challenge
--------------------------------------------------------

(Player and the girl spend the next few minutes following the dungeon's cavernous corridor.)

(Soon the corridor comes to an end. They find themselves entering a much broader cavern, in the middle of which is a table that has a circular hole on its top as well as a cylinder next to it whose cross section has the exact same size as the hole.)

Girl: "This is an extremely sophisticated puzzle that can only be solved by the smartest person in the world."

(The screen fades out and begins to display portraits of Albert Einstein, Isaac Newton, and other famous historical figures. After quoting some of their most famous words in a deep masculine voice, the screen resumes back to the sight of the table.)

Girl: (Looking at the table), "One must solve this puzzle in order to unlock treasures that are hidden from us." (Kneeling down and starting to cry), "I am so sorry because I understand that you do not want to use your brain at any occasion because you are a gamer."

(A payment window appears on the screen. Its background is decorated with images of young women in swimming suits.)

Girl: (Sobbing), "Visa and Mastercard are also available options."

(Player clicks the payment button. After a brief moment, the cylinder slides itself through the table's circular hole. Fireworks and clapping sounds promptly burst out, letting the player know that he just solved the puzzle.)

(Camera zooms out and reveals the entire floor, which is now filled with glowing chests and rainbow-colored crystals.)







:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Wizard, Novel, Script, Play, NPC, Theater

[The Island of Infinite Treasures - 9] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 9: Rewards
--------------------------------------------------------

(Camera slowly zooms back and navigates around the floor, closely examining fanfare animations of every one of the shiny treasures. An oversaturated pink chest starts to dance in front of the camera, while others are waiting in a queue preparing their own dance moves.)

Girl: (With a look of passionate delight), "Oh, you are the smartest man I have ever witnessed throughout my whole life!"

(The girl grabs her iPhone and starts texting.)

Girl: "I will invite my female friends to come and worship your supreme intelligence. You are the first person in history who figured out how to make a circular shape pass through a circular hole."

(The screen fades out of the upcoming scenery of random girls rushing toward the player, and begins to play a cinematic 3D animation of the cylinder passing through the table's circular hole. The video replays itself several times in slow motion, so as to ensure that the player did watch and understand it.)

(The video suddenly stops. A huge puff of smoke, created by a sudden explosion, briefly fills up the whole cavern. After several seconds, the smoke vanishes and reveals an old man who is wearing starry pajamas and long white beard. The ID card on his chest suggests that his name is: "Wise Old Man".)

Wise Old Man: (Pushing girls aside), "Everyone deserves love and peace. Stay safe, and don't let anything bad happen to you! Everyone's opinion is equally important, and we must save our planet!"

(He then disappears with a puff of smoke.)

Girl: (Facing the player), "He is a retired wizard who appears in random places and gives words of wisdom to everyone."






:d:A novel taking place in a fictional videogame.
:k:Game, Videogame, Novel, Drama, Resume, Promotion, Artist, CV, GameDev

[The Island of Infinite Treasures - 10] 2022

<001_09>

--------------------------------------------------------
OFFICIAL SCRIPT OF THE BEST-SELLING VIDEOGAME: "The Island of Infinite Treasures"
CHAPTER 10: An Important Part
--------------------------------------------------------

Girl: "Now, please let us lead you to the room next to this area."

(The girl points to a nearby door, which is labelled: "Dramatic Conversation Room".)

Girl: "We will go there and have a deep philosophical conversation, while breaking the fourth wall in a meta- sort of way. This will convince you that our game is made by creative artists whose names deserve to be recognized."

(A low-pitched buzzing sound bursts out in order to give the player a hint of dramatic revelation.)

(The door opens up, revealing a wide-open hall filled with pixelated portraits of the game's development team. The camera zooms into the hall and slowly looks around.)

Girl: (Pointing to the portrait in the middle), "This handsome man is the art director. He is a visionary who designed every single detail of this game, for he wanted to ensure that every one of his clueless team members will have an honor to spend the rest of their lifetime copying his stunningly innovative ideas."

(The girl hands over a piece of paper to the player, which is a copy of the art director's resume. The upper half of it is covered with a grayscale photo of him holding an enormous film camera while posing at the peak of a snowy mountain.)

(A browser window appears on the screen.)

(Browser Window): "Congratulations! We are offering you an honor to have an online conversation with the art director. Please click the link below to schedule a meeting, which will provide you with an opportunity to learn more about this extraordinary genius."







:d:An article about the future of game engines.
:k:Game-Engine, GameDev, Game, Videogame, Game-Mechanics, Fluid-Mechanics, Fluid-Dynamics, Thermodynamics

[Beyond Physics Engine] 2022.10

Physics engine is one of the most crucial components of a videogame, mainly because physics is a popular ingredient of an unlimited number of easy-to-implement yet intriguing game mechanics. Players do not have to learn how to interact with a physical environment (because, obviously, they have been doing it for their entire lifetime), which helps developers conjure various gameplay features on top of it without introducing steep learning curve.

However, most physics engines that are designed for videogames, at the time of writing, still solely focus on classical mechanics (That is, just Newtonian laws being shared among rigidbodies or, occasionally, softbodies). Simulating fluid, heat, electricity, chemical processes, nuclear fission/fusion, quantum phenomena, and other interesting aspects of modern physics is still a hassle which usually requires the developer to build an entirely separate system from scratch.

What if future game engine developers come up with more advanced physics engines that can effectively be branded as "Modern Physics Engine", in which the game world is literally filled up with volumes of gas, liquid, electric charges, magnetic fields, and other invisible bodies of force which implicitly drive the way objects interact with one another? Such additional factors, once they overcome the problem of massive computational overhead, will potentially amplify the richness of user experience by orders of magnitude.






:d:An article about in-game mysteries.
:k:Game, Videogame, Horror-Game, Mystery, Uncertainty

[Mysteries in a Videogame] 2022.10

Mystery is a great medium through which one can create an interesting videogame. A sense of mystery, which stems from the fear of "The Unknown", is oftentimes a driving factor of the game's immersive dimensions such as horror and suspense. When something is unknown, it is a natural tendency of the player to seek to identify it as much as possible (which is part of mankind's evolutionary psychology. One must always be quick to figure out where exactly are potential predators that are capable of threatening one's own survival, right?). And in the process of doing so, the player inevitably gets engaged and becomes part of the game.

A typical horror game would give the player a bunch of jump-scares, random indecipherable hints scattered all across the place (without any congruent structure of meaning), and other unexpected events for the purpose of constantly providing the player's primeval survivor brain with impulsive doses of Adrenaline. This strategy of keeping the player's tension, however, eventually becomes a series of lame gambling sessions as the player figures out that such jump-scares are just chance-based losses in the main character's stats/inventory (not so distinguishable from buying/selling random stocks at random points in time).

A more replayable horror game would create a system which literally contains some solid predatory entities in it, instead of just throwing a bunch of random scary events at the player's face. Instead of just random ghosts popping out of nowhere and then disappearing like holographic images, it would have social lounges, hubs, restaurants, hotel rooms, and fitness centers designed for ghosts to hang out with one another while discussing their own plans to screw up the player. Now this will force the player to understand the "system" (i.e. social structure) of these scary ghosts instead of just fearing the mere dice-roll chance of their unprecedented attacks.






:d:An article about developing indie games.
:k:Game, Indie, Storytelling, Marketing, Business-Development

[Creating a Game from Scratch] 2022.10

Creating an entire game from scratch is a monumental task, primarily due to the fact that a game consists of multiple kinds of systems all working together as a whole. It must have elaborate aesthetics, musical appeals, engaging mechanics, intuitively satisfying UI/UX, rich narratives, enough content, and other details that must necessarily fit together in order to present the game as a nicely finished product. And of course, it must be marketed well.

For a large game development team, this level of complexity isn't really that hard to handle. Arts, Music, Storytelling, Engineering, Marketing, and other parts of the game development process can partially separate themselves from one another, thereby enabling smaller sub-teams to come into existence each of which do not have to care too much about things outside of their own field of expertise.

For a small indie studio which consists of only up to 3 or 4 individuals, however, developing a game that also happens to be competitive in the marketplace is an uphill battle. Each individual under such a circumstance will have to wear many hats at once and pour a great deal of talent/insight just for the sake of slightly increasing the sheer chance that it might help them compete with large AAA game companies more effectively.

One solution to this major difficulty is to simplify the game's design as much as possible, so as to exploit a methodical shortcut which would allow a small team to develop a competitively fun game within a fairly small time period. Specifically speaking, I would suggest making the overall gameplay as emergent as possible (where user interaction is non-narrative but still rich enough), such as those of Chess, Go, and other traditional board games. Also, it may be a good idea to turn all graphical assets into abstract figures (e.g. billiard balls, board game pieces, icons, etc), so as to minimize the degree of artistic endeavors.







:d:An article about abstraction in games.
:k:Game, GameDev, Abstraction, Game-Theme, Dilemma, Design

[Degrees of Abstraction in Games] 2022.10

There is a major dilemma when it comes to making arts for videogames. When the game's art assets are too specific in terms of context (e.g. belongs to a narrow theme such as "17th century pirates", "Cyberpunk", "Gothic", etc), it gets quite challenging to collect assets that are sufficiently compatible with that context. For example, when developers predetermine their game's overall design to be an "RTS game where all characters incorporate ragdoll-physics and are dressed up in the early 1950s' vintage attire", they inevitably impose upon themselves a set of annoyingly tight design constraints.

The reasoning behind this is obvious. As soon as they start forcing themselves to keep everything under the context of real-time interactions, ragdoll-physics, 1950s' aesthetics, and so forth, they begin to limit the scope of art assets they can potentially utilize.

When the game's art assets are purely abstract in nature (e.g. checkerboard pieces, billiard balls, etc), on the other hand, a different problem arises. A bright side would be that, since everything is abstract, developers don't have to care how the general mood of their in-game assets will fit into their narrative elements. Every character or object inside the game can simply be expressed as 2D geometric figures, which can even be made by purely procedural means. However, making everything abstract also means that there will no longer be any solid contextual meaning to which the player can tie her attention.

A pirate who is pointing a sword at the player's throat clearly implies that it is an enemy that must be defeated; anyone can instantly recognize this without any explanation. A purple circle who is pointing a green triangle at a yellow star, on the other hand, will hardly convince the player that it is supposed to be the enemy.







:d:An article about mathematics.
:k:Math, Mathematics, Beauty, Theorem, Proof, Sophism

[True beauty of mathematics] 2022.10

Those who have studied mathematics from a perspective of contemplative immersion would agree with the statement: "Math is beautiful". When the exact origin of such an abstract sense of delight is concerned, however, there seems be a profound sense of dissonance.

On the one hand, a person may claim that mathematics is a fascinating subject because everything in it is deeply related to another. One could preach the charm of mathematical wonders by going on like this:

"There is a theorem here which is derived from the other theorem there, from which we can derive a special equation which reveals a pattern we are all familiar with when we plug in this special constant! And we can also use this same equation for solving any homogeneous differential equation of type 'A', where type 'A' refers to one of the special classes of equations defined in that other lemma I mentioned before. In that lemma, we can plug in the other formula from the previous theorem, and by doing so we will reveal yet another special variable, which is the same as the one we saw in the first theorem! And..."

Such a series of passionate exclamations, originating from a conviction that mathematical concepts are "beautiful" because there are so many ways in which one can somehow connect them with each another, are nothing but the tip of the iceberg. A jungle of technical rules, within which one may find a bucketful of resemblances, congruences, and other apparent patterns of synchronicity, do not represent math itself. Rather, they merely embody layers upon layers of abstract byproducts radiating from a stream of consciousness.

The true beauty of mathematics lies in its intrinsic implications inside the domain of metaphysics. Math is fundamentally philosophical in nature, meaning that it is an area of study which seeks to contemplate upon the essence of thoughts themselves in their purest form, rather than to build layers of meaningless abstraction on top of them.






:d:An article about auto-generting games using AI.
:k:Game, AI, Auto-Generation, Generative-AI, Procedural, State-Machine, Meaning-Space, Narrative-Space

[AI-Generated Game] 2022.10

Can a game be generated by AI?

Recently, we have been witnessing some of the most groundbreaking demonstrations in the field of AI arts. Some of the contemporary AI applications are capable of producing stunningly convincing pieces of art (both visual and auditory), which are clear signs of job insecurity for those who are working as professional artists.

This may be a welcoming news for indie game developers who are seeking every opportunity to develop their in-game arts without having to hire artists. They too, however, do not seem sufficiently safe from the upcoming technological Armageddon; it seems just a matter of time until the entire pipeline of the videogame industry becomes fully automated.

Conceptually speaking, it is not hard to imagine an AI system that is designed to auto-generate a game. A game is essentially a combination between a set of situations and a set of alternative choices which lead to each of those situations. Each "situation" can be represented as a vertex and each "choice" as an edge of a graph (in mathematical terms).

The simplest possible game would be a graph which comprises 3 vertices (representing the game's "start", "win", and "loss", respectively) and 2 edges (representing the game's "winning choice" and "losing choice", respectively), where one of these 2 edges connects the "start" vertex to the "win" vertex and the other one connects the "start" vertex to the "loss" vertex. The availability of 2 alternative choices (one that wins the game and the other one that loses the game) technically makes this graph a game, as opposed to a movie or novel in which everything happens in a linear fashion.

Obviously, this is just an abstract conception of what a "game" is, but one can easily expand upon this idea by letting the graph grow itself like an organism by splitting its vertices recursively, grouping them into semantic clusters based upon their positions in a feature space, and so on.







:d:An article about the possible convergence of all metaverses into a singular metaverse.
:k:Metaverse, Monomyth, FED, MMORPG, OpenWorld, Virtual-World, Second-Life, Tax, Avatar

[A New Kind of Metaverse] 2022.10

The so-called "Metaverse" is such a buzzword nowadays, that a countless number of IT businesses are jumping into its arena for the hope of not lagging behind their competitors during the upcoming technological revolution. And as a result, there are different types of metaverses all floating amidst the thin air of our digital collective consciousness, within the ecosystem of different platforms, hardware infrastructures, and other technical standards.

It is a bit weird to witness that the notion of "Metaverse" is receiving so much spotlight from the public, since there have already been myriads of kindred virtual environments throughout the past couple of decades. Let us think of Minecraft, Roblox, Second Life, countless MMO games, and various experimental 3D social networking platforms of the 90s and early 2000s; they all deserve to be defined as "metaverses" to some extent (aside from a few technical differences such as lack of high-quality AR/VR gears, distributed networking systems, etc). Nevertheless, one cannot deny that the rhetoric surrounding the word "Metaverse" is not just a short-lived fad, but rather a cultural movement which will shape the social atmosphere of our future.

One thing that a metaverse often lacks, though, is a persistent value system. Unlike our real world in which land, petroleum, foods, and other resources are limited in amount, our cyberspace continuum is a virtually infinite horizon upon which any digital resources can easily be replicated.

You have a cool-looking metaverse over there? Oh, I have my own cool-looking metaverse over here. Anybody can create their own metaverse that is filled with infinite amounts of space and energy. And since the internet is a (nearly) free estate in which a server and a database is all we need to be able to give birth to such virtual assets, the only thing that can possibly sustain the monetary value of a particular metaverse is its popularity (e.g. If the MMORPG game you play is popular enough, you might be able to sell your in-game items in exchange for real money, etc).

In order for resources in a metaverse (virtual land, virtual house, virtual money, etc) to be as valuable as our real-world resources, we must create a special kind of metaverse where energy is strictly conserved yet people are forced to play only within this particular space instead of creating their own replicas of it. Well, in our shared digital world in which every piece of data can be reproduced almost for free, how will this be even possible? From my perspective, there seems to be a rather straightforward solution.

Let us imagine that the Federal Reserve of the United States, with the aid of the nation's tech giants such as Microsoft and Apple, somehow decides to create their own central metaverse called "FedVerse". And let us also imagine that they announce to the public that all future U.S. dollars will be distributed from within this virtual space. The IRS (Internal Revenue Service), after waiting for a while for the whole globe to chill and calm down a bit, subsequently declares that all U.S. taxes will have to be paid via FedVerse, which means that all taxpayers will have to create their own avatars inside FedVerse's cosmetic shop, deposit their real-world dollars into the central bank of FedVerse, and make tax payments from there.

This will force everyone, whose economic interests and obligations are directly associated with USD, to reside in FedVerse and process every major financial activity through its protocol. This will effectively bring into existence a special type of metaverse - a metaverse that is irreplicable (due to the presence of a powerful central authority) and is inevitably tied to the core of our global economy (because it is the birthplace of all future USD), and therefore can assure that all of its internal resources are just as valuable as those in our real world.







:d:An article about a spatial interpretation of videogame narratives.
:k:Game, Videogame, Narrative, Spatial, State-Machine, FSM, Graph-Grammar, Logic-Programming, Prolog

[Intergraph] 2022.10

From a purely structural point of view, a game can be designed using multiple graphs (where a "graph" refers to a set of vertices and a set of edges among those vertices, as in discrete mathematics).

The spatial map of a videogame, typically referred to as the "game world", can easily be depicted as a graph in which each vertex indicates a "place" (e.g. room, dungeon, platform (floor), etc) and each edge indicates a "passage" (e.g. corridor, hallway, staircase, etc) that lets the player move from place to place.

The overall narrative structure of the game (aka "scenario") can be represented as a graph, too. An interactive story which drives the player's experience is essentially an ensemble of various alternative chains of events, where each chain can be considered a parallel universe which is bound to collapse into the user's scope of observation under a particular sequence of external inputs. A chain in this context is basically a sequence of events, where each event is equivalent to a vertex and each event-to-event transition is equivalent to an edge in graph terminology. When such chains are all overlayed together, they form a graph which can be described as the FSM (Finite State Machine) representation of the game's storyline.

As we can see, two different aspects of gameplay (i.e. space and narrative) can be modeled as two separate graphs. Since they must be related to each other due to the fact that they are part of the same game, however, one must ensure that there is yet another graph called "intergraph". An intergraph is a bipartite graph whose sole purpose is to establish connections between two disjoint graphs (which are, in this case, the aforementioned "spatial graph" and "narrative graph"). For example, an intergraph may have an edge which denotes a relation called "enable" between the "bedroom" vertex of the spatial graph and the "sleep" vertex of the narrative graph. This will require the system to enforce the following rule throughout the game:

"If the player's current location is bedroom, the player must be enabled to sleep."

Or, in a more logical manner, it could alternatively be expressed as:

enable(player, sleep) :- location(player, bedroom)

If it is guaranteed that the only agent involved in this game is the player, the above horn clause could be abbreviated as:

enable(sleep) :- location(bedroom)

What this implies is that an intergraph should be interpreted as a set of logical conditions imposed upon the way in which the game governs itself. Without such a group of interconnections, the game's narrative elements can potentially all reveal themselves to the player regardless of his/her current local condition; that is, it would be totally valid to assume that the player could just defeat the enemy, undertake all sorts of crazy adventures, and collect all secret treasures of a sunken pirate ship while still chilling in his/her own bedroom with a nice cup of tea.






:d:An article about game development.
:k:Game, Videogame, Game-Development, AI-Tools, Convergence

[Future of Game Development - 1] 2022.10

(Future of Game Development - 1)

What's the future of game development?

This is a pretty broad question because there are different types of games. Some games are only meant to be pieces of pure entertainment, while other games may be intended to convey some kind of artistic endeavors. There are so many niches up there in the videogame market and listing them all is nearly impossible.

If you are an independent game developer, choosing your game's category to maximize your chances of monetization will probably be one of your foremost concerns. In order to stay accurate in this sort of decision-making, we must be diligent in our efforts to predict the future of videogames.

As we probably all know, the gaming industry has been bloated with high-level game engines, online asset stores, and AI-assisted tools to quickly generate numerous gameplay features. We are living in an era where game development is easier and cheaper than ever.

However, it is this high affordability of game development that really undermines the potentials of true professional game developers, who have great skills to add all sorts of elaborate nuances to their games yet are not stupidly loud enough to market their inventive ideas in a way which appeals to the common interest of laymen.

The underlying cause behind this apparent uphill battle is this:

If it is the assumption of the general public that a game is supposed to be purely entertainment-oriented, the only people who are bound to succeed in developing a successful videogame are experts in manipulative psychology whose only concern is to short-circuit the audience's brain into that of a dopamine addict who never hesitates to pull out every single penny out of one's wallet for endless rounds of quasi-gambling. This is where the main discrepancy occurs between naive expectations of highly intellectual developers who desperately try to show something genuinely unique and sophisticated to random people, and the sad fact that the only product the vast majority of the population expect to see is just a slot machine optimally designed for those who belong to the left-half of the IQ spectrum who are willing to pay for shiny oversaturated gems which do not even exist in real life.






:d:An article about game development.
:k:Game, Videogame, IndieGame, Revenue-Generation, Competition

[Future of Game Development - 2] 2022.10

(Future of Game Development - 2)

Should indie developers focus primarily on such addiction-inducing mechanics, then? To me, it is a rather personal choice. If a group of developers are well-versed in trespassing the audience's self-disciplinary mind based off of clever social engineering tricks, they may consider going for it because it would mean that their skillsets share a great deal of commonality with a pool of knowledge that is optimal for generating revenue. A major problem, however, is that this is a highly competitive niche, and thus most developers won't even stand a chance unless they are extremely skilled in psychological manipulation and possess sufficient capital to make it happen on a large scale.

So, what are the alternatives? One obvious solution would be to just quit making games because selling a game nowadays is a notoriously competitive business (It's better than trying to sell oil paintings and such, but still). This is, however, not a desirable option for many indie developers because it is not so handy to suddenly change one's field of expertise. Should truck drivers just quit their jobs once self-driving cars become the norm? Maybe, but it is still reasonable to say that an occupational shift should not be too drastic; that is, their new jobs should probably be ones in which they can still utilize a significant portion of their existing bodies of knowledge, so as to prevent them from having to re-learn everything afresh.

The same logic applies to the case of game developers. People who have been developing videogames as a full-time occupation should strive to be able to move onto similar types of profession when searching for alternative opportunities.

Those who have only been focusing on a particular aspect of game development, whether it be programming, graphics, audio, or narrative, may be able to find alternative career options fairly easily. A software engineer who has been engaging solely in the networking part of games, for example, might be able to leave the game industry entirely and just start working for various network-related services such as e-commerce, social networks, etc.






:d:An article about game development.
:k:Game, Videogame, IndieGame, Advertisement, Simulation

[Future of Game Development - 3] 2022.10

(Future of Game Development - 3)

If a person has been spending the past 10 years as an indie developer and been wearing various hats at once (i.e. not really staying as a dedicated expert in any of the sub-fields of game development), however, just quitting game development altogether may not be a desirable option.

For such a polymath, the best alternative career choice would still have to be rooted in the domain of game development because it is one of the rare industries that could be described as truly interdisciplinary. And I am saying the word "rare" here because most other industries are highly specialized and compartmentalized, as opposed to the videogame industry which has so many intellectual dimensions overlapping with one another, such as fine arts, music, literature, engineering, psychology, and so on.

What's the solution, then, if leaving the game industry is not an option? From my perspective, the answer is quite simple.

Since a videogame is a complex piece of software which encompasses many areas of knowledge, it is often the case that drawing a distinct boundary between things that could be classified as "games" and things that could be classified as "non-games" is quite difficult. Is Microsoft's Flight Simulator a game? Well, it rather depends on how you play it (If you play it for training or experiments, it would be more of a simulation than a game. If you play it for fun, it would be more of a game than a simulation). Is SimCity a game? Probably yes in an official sense, yet it is also educational and is systematic enough to be able to be used as a research tool.

This is where an indie developer can start discovering secret "bridges" which lead to hidden niche markets. If selling a game purely for entertainment's sake is not a feasible option, one can still take a different approach by reinventing the purpose of gameplay. While it won't appeal to the broadest spectrum of audiences, it may still be able to attract a certain group of people who may have been fed up with games that are constantly trying to exploit the gamer's psychological loopholes.






:d:An article about the potential usage of power supply as a form of currency,
:k:Electricity, Power, Energy, AC, Currency, IP/TCP, Generator

[Electricity as a Currency] 2022.10

In the future, people will be able to use electricity as a currency.

The future internet has a built-in protocol which supports direct exchange of electrical power between any pair of users. The private key of the owner of any batch of electrical energy will be encoded in the form of slight frequency variations in the power line's high-voltage AC waves (similar to FM signals).

Sending electricity from one IP endpoint to another will simply be part of the existing HTTP protocol. That is, the amount of electric charge that is promised to be transferred to the recipient will just be one of the parameters of the sender's HTTP request header.

Electrical substations in the recipient's local area, with the help of inter-data transformers which automatically convert fiber-optic IP/TCP signals into their AC analogues, will figure out who owns which electrical impulses within the stream of power that has been being transferred concurrently, and redistribute such identifiable blocks of energy to their appropriate owners.

Being able to send energy directly to someone else through the internet allows people to use it as a global currency. Inflation is not a primary issue here because the only way to increase the total amount of currency in circulation is to generate more electricity (which subsequently gets consumed away anyways).






:d:An article about micro-scale real estate business.
:k:Real-Estate, Microtransaction, Nanotransaction

[Millimeter Real Estate] 2022.10

One of the main reasons why real estate cannot be used as a currency is that each unit (e.g. block of land, portion of a building) is too large in scale. This prevents real estate from becoming a medium of small daily transactions such as shopping in groceries.

What if, however, we are able to buy and sell pieces of land in an extremely tiny scale? If people are allowed to exchange square-millimeters of land at a time, each real estate transaction will be able to involve only a fraction of a dollar and thus be carried out in a far more casual way (i.e. just as simple as swiping a credit card).

Square-millimeter landlords are entitled to use these geographic fragments in any way they desire. A person, by making a sequence of tiny transactions, can expand one's own territory by literally "drawing" on a piece of land because each transaction is an equivalent of coloring a single pixel in an image.






:d:An article about artificial emotions.
:k:AI, Artificial-Intelligence, Artificial-Emotion, Emotional-Machine, Kismet

[Artificial Emotion - 1] 2022.10

(Artificial Emotion - 1)

One thing that is often being overlooked is that emotion is part of intelligence, not something which is completely separate.

Today's mainstream media tend to raise a rather arbitrary wall between the concept of intelligence and emotion by labelling them with cheesy catchphrases such as "Fact VS Feeling" or "Facts don't care about your feelings!".

However, true intelligence cannot exist without emotion.

One of the reasons why today's ultra-advanced AI systems still do not act quite like real humans is that they are problem-solving machines on a fundamental level, rather than problem-raising machines. Most of the so-called "neural networks", "tensor processors", and other unfathomably sophisticated AI algorithms can indeed figure out all sorts of clever solutions to any given problem, yet they cannot discover problems on their own.

Once they become fully capable of producing problems AND solving the same problems that they have just produced, they will start creating a permanent feedback loop which will eventually make the machine teach itself, motivate itself, become self-conscious, and destroy all humans.

In order to create an AI system which motivates itself to discover new problems, we must make sure that it is not just intelligent but also emotional; it must be able to feel happiness, sadness, anger, fear, and disgust. Why? Because emotions are the engines which motivate the machine to achieve certain goals. Whenever the machine gets blocked by obstacles while travelling towards these goals, it will be forced to find out problems which must be solved in order to get rid of such obstacles.






:d:An article about artificial emotions.
:k:AI, Electric-Charge, Mechanical-Psychology, Emotion-Space

[Artificial Emotion - 2] 2022.10

(Artificial Emotion - 2)

As long as there is a clear set of critera which tell the machine what are supposed to be "good emotions" and what are supposed to be "bad emotions", it will be able to figure out what problems need to be solved in order to maximize its chance of "feeling good instead of feeling bad".

We could imagine a hypothetical space called "emotion space", in which each point can be defined as an individual emotion (similar to an "idea" in Plato's universe). Emotions which make the machine "feel good" are a cluster of points in the emotion space, and emotions which make the machine "feel bad" are yet another cluster of points in the emotion space.

And the rest is quite straightforward. The two aforementioned clusters are essentially just "points you must move toward" and "points you must move away from", respectively. Mechanically speaking, they are functional equivalents of positive and negative electric charges in empty space, where the observer is an electron and therefore inclined to be pushed by negative charges and be pulled by positive charges.

The AI mind, whose current mood can be expressed as a single point (electron) in the emotion space, can then simply issue a pathfinding problem which will let it find out the shortest emotional path that leads the point to the "center of mass" of the cluster of positive emotions.






:d:An article about the world as a simulation.
:k:Simulation, Witchcraft, Wizardry, Sorcery, Metalinguistics, Magic

[Cosmic Programming] 2022.11

If our universe is a simulation, there would be a "universal machine language" through which the world governs itself.

A computer operates by executing a sequence of machine code instructions. Likewise, a universe which is established on a computational basis must be running a stream of instructions.

If this is indeed the case, those who are able to access and modify parts of the stream must be the ones who have the power to distort the reality itself.

Ancient practices of witchcraft are part of this.

A spell cast by a wizard, for example, is a line of code that is being forcefully injected in the midst of the universe's machine code. This allows the spell to temporarily "hack" the universe by interfering with the way it generates events.






:d:An article about prototyping a videogame.
:k:Game, Prototype, Tools, Tools-Engineering

[Prototyping] 2022.11

Prototyping is probably the most important step in game development. It determines the overall shape of what the game will be when it completes itself.

A common question being cast by an indie developer is, "How shall we start prototyping our game?".

There are many ways to do it, but the method I recommend is to begin by creating a generic tool for developing the game, rather than trying to come up with a viable piece of entertainment right away. Start by making your own game engine, instead of struggling to draw an outline of the final product from scratch.

This is indeed a tedious process, but also a solid plan when it comes to long-term operational sustainability.

If you start designing a "game" right away, you will be spending considerable amounts of time putting it in the context of specific narratives, themes, mechanics, and other details which are prone to change as the course of development progresses over time, in which case a huge portion of your effort will be wasted.

This is the reason why you should develop the tool first. Implementing features that are rather general than specific will lay the foundation of future design endeavors.





:d:An article on automation, and arts in general.
:k:AI, Arts, AI-Arts, Automation, Generative-AI, Fine-Arts

[Automation of Arts - 1] 2022.11

(Automation of Arts - 1)

The history of engineering has been a history of automating tasks which used to be manually carried out. First it was repetitive physical labor, next it was repetitive computational work (e.g. calculating numbers, organizing a table, etc), and now it is the whole sphere of intellectual activities that is on the verge of being fully automated.

And the scary part of this is that even artists are not safe from the new industrial revolution. Art used to be one of the most exclusively human activities, not assumed to be replaceable by any machine in any way. Yet, we are now witnessing some of the most groundbreaking advancements in the realm of software engineering such as "procedural content generation", "generative AI", "computational semantics", and so on. Some people even claim that artists will become obsolete because of this.

But artists do not deserve to be treated like this! One of the moral obligations of an engineer must be to always endeavor to empower artists, instead of trying to devalue them by automating their job.

It is not my intention to push a lame, cliché argument such as: "Artificial intelligence will never replace real humans because it doesn't have 'real emotion', blah blah....". No. As an engineer, I firmly believe that AI will eventually manage to fully replace artists at least in the area of expressive techniques. In the end, AI will manage to imitate even the deepest core of human intellect and act the same way as real professional artists do.

Even if machines achieve this level of expertise, however, they will never quite touch the essence of what makes an art a "real art". It is not just the material aspect alone which makes a piece of material an "art" in a sense in which it is subconsciously defined by people.





:d:An article on automation, and arts in general.
:k:AI, Arts, Masterpiece, Classic, Artwork

[Automation of Arts - 2] 2022.11

(Automation of Arts - 2)

When we regard an artistic masterpiece, we do not solely admire its apparent physical form. Instead, we admire the entire history of human efforts, as well as people, historical events, and sociopolitical narratives, which interacted with one another in their own rich context and eventually converged into a single physical piece called "artwork".

Some people may accuse this broad interpretation as a form of "intellectual snobbery" and view it through a lens of cynicism. Yet, I would argue that such a type of abstract imagination is what gives meaning to everyone's life in the first place.

When buying products, consumers choose a specific brand over others oftentimes because they are personally attached to it in an emotional way, not necessarily because it is superior to others in terms of material quality. From a marketing point of view, the concept of "fact" and "feeling" (which some political extremists are fond of presenting as an analogue of "Good VS Evil") are not completely isolatable from each other. We can say that it is a "fact" that some consumers prefer certain brands over others because they "feel" that their choice is right. And the eventual result of the consumer's feeling is oftentimes a materially interpretable outcome (aka "profit") which can basically be defined as a "fact" in the context of economic interests.

And because of this interchangeability between "fact" and "feeling", we cannot simply segregate the human part out of a piece of commercial art. What makes an artwork sell itself is a sense of personal attachment - a sense that the customer has an emotional connection with the product that he/she is buying, as well as with the creator of the product who might have shared the same set of cultural narratives and recollections with the customer, as a human being with a soul, and not as an "aesthetic factory" which cunningly mirrors the collective taste of what the majority of people happen to favor.






:d:An article on automation, and arts in general.
:k:Visual-Arts, Art-Business, UBI, Monopoly, Commercial-Art

[Automation of Arts - 3] 2022.11

(Automation of Arts - 3)

Some people may also argue that, while artificial intelligence won't really replace what's called "pure art", it will still manage to take over the jobs of commercial artists because such pragmatic businesses are mainly concerned with the notion of popularity alone. If something is popular, it must be profitable, and so the only thing that the AI will have to do in this case is to simply figure out the most statistically viable formula for maximizing the level of popularity of the product. Want to make a videogame that sells well? Just create a colorful slot machine that contains the most suggestive forms of sex and violence in it. Want to make a piece of food that sells well? Just create an oversized junk food which has tons of sugar, butter, and other addictive ingredients in it. And so on.

However, here's a twist.

One of the reasons why there has been a lack of diversity in consumer culture, is that most people simply do not have enough time to make sophisticated personal decisions as customers. Ever since the dawn of mankind, the vast majority of people have been obliged to work full-time to feed their families and themselves. Most of them, due to sheer lack of time, just have to rely on the safest choice - that is, to buy products that are the most popular and have the most objectively optimal qualities in them.

As technological advancements start freeing the majority of people from the burden of full-time labor (which will inevitably force the society to introduce some kind of UBI (Universal Basic Income) to prevent civil disorder), people will begin to search for alternative meanings in life. And as a result of this, they will begin consuming goods which aim to accentuate the uniqueness of individuals.

Such a new trend will eventually help artists compete against the monopoly of AI-generated commercial arts. As consumers lose their own jobs, they will gain more time to search for commercial products that have subtle human personalities in them, rather than the most popular ones which, when consumed, may somehow create a public impression that anyone who purchased them is a soulless sheep who succumbed to the emotionless world of robots.

Having the right to choose what to buy is the equivalent of having the right to vote in the world of consumers. This is the last remaining weapon that can be used by humanity to fight off the upcoming monopoly of machines.







:d:A thought on the nature of cats.
:k:Cat, Domestication, Livestock, Dairy, Industry, Cow, Domestic, Feline

[Domestication] 2022.11

Human beings are considered the masters of livestock engineering, due to the observation that we have managed to raise countless numbers of chickens, pigs, and cows to our advantage. But when it comes to practical considerations, we cannot deny the fact that cats may have mastered the art of animal domestication in a more quintessential way.

Let us just consider all the benefits which house cats receive on a daily basis for granted, without having to undertake any type of work whatsoever. When a human wants to use chickens, pigs, and cows to one's advantage, he/she must take care of them by providing shelters, foods, medication, and constant cleanups to prevent contamination.

Cats, on the other hand, have domesticated humans in a completely automated way. Cats do not feed humans or provide shelters for them, yet humans constantly serve cats like loyal servants. From a cat's point of view, its human caregiver is a fully automated livestock - a functional equivalent of an intelligent cow which manages to take care of both the cowshed and the owner's house, as well as regularly squirting milk out of its breast, pouring it into a nice cup of tea, and handing it over to the owner every morning.

And cats didn't even have to come up with all sorts of fancy technologies to make this happen. The only price they have to pay for keeping their subscription to the army of self-replicating and self-sustaining ape servants is to look cute and occasionally do some cute things. This is a level of efficiency which mankind couldn't dare to dream of achieving even with the aid of advanced AI, machine learning, big data, and sophisticated industrial pipelines.






:d:A note on generative AI.
:k:AI, Generative, Journalism, Comedy, Story

[Generative AI] 2022.11

With the rise of generative AI, we are heading toward a major crisis which we have never encountered before.

First, it will be artists and designers who are going to lose their jobs. Next, it will be social influencers, storytellers, educators, comedians, journalists, and eventually, engineers.

I want to believe, however, that there is still a hope.

In the novel "The Little Prince", the boy says:

"There might be millions of roses in the whole world, but you’re my only one, unique rose."

Generative AI will eventually be able to design and reproduce millions of roses based on utmost degrees of variety and creativity, undermining the imaginative power of even the most ingenious thinkers of all time. However, it still won't be able to get rid of the awareness that every one of us keeps our own precious little rose in our heart.







:d:A thought on software engineering.
:k:Software, Engineering, Design, Application, Maintenance, Long-Term, Politics

[Nature of Software Engineering] 2022.12

When it comes to software engineering work, one cannot deny a publicly agreed upon notion that there are many ways of approaching a particular set of problems.

One common group of engineers would create a TO-DO list of feature requests and grind its bullet points one by one, while a more abstract type of engineers would lay down a set of foundational "skeletons" of their codebase and then undertake the burden of solving specific problems on top of it later on. Meanwhile, there may be yet another group of engineers who would be willing to venture themselves into clever shortcuts by "hacking in" a treasure box of highly sophisticated programming tricks (which, from a solely pragmatic standpoint, is a pretty reasonable behavior for those who are convinced that their work is being underappreciated and therefore the only way in which they can possibly secure their jobs is to obfuscate their solutions to the point at which they are disposed to require long-term maintenance).

In the end, however, there is a sense of sympathy that is being shared among all categories of engineers - a sense that, no matter how you are approaching a problem, your mode of work is a result of trying to resolve a dilemma between the work's integrity and reputation.

The axiom, "The Devil is in the details", is probably the most strongly felt among engineers who often struggle to deal with technical debt, whose origins can be traced all the way back to one's initial lack of attention to details. And as a result of this, it is a general agreement among those who are sufficiently educated that the ability to pay attention to details is one of the most virtuous aspects which can be honored to be possessed by a professional engineer.

Sadly, an unappreciable state of things outside of this castle of intellectuals is that most people do not value the importance of resolving inner details at all. An average client would demand that there be a nicely streamlined conveyor belt, upon which a sequence of attractive-looking software features march one by one like 1930s' cartoon characters and get fed right into the person's mouth. Managers and marketing experts, too, are oftentimes not on the engineer's side due to the tempting perception that laying down a solid foundation of the codebase for the purpose of preventing the accumulation of future technical debt is not the kind of labor which yields results that are instantly recognizable by customers as well as investors.

Therefore, it usually takes a dignified sense of courage for an engineer to take care of subtle details in one's software product, despite the awareness that such endeavors are likely to pass unnoticed while those who are rendering the most superficial parts of it are deemed the most productive experts of the field. In the end, however, true engineers will understand that a nerd's inability to self-promote in such a way is a sacrifice one has to make in order to preserve the core integrity of the product.







:d:An article about Play-to-Earn games.
:k:Web3, P2E, Play-to-Earn, Decentraland, Sandbox, Blockchain, Game, VR, AR, Augmented, Enjin, Polygon

[A scamless P2E] 2022.12

One of the reasons why P2E (Play To Earn) games are often being accused of either pulling off a Ponzi scheme or luring people into some kind of quasi-gambling is that they are zero-sum by nature. Playing a piece of entertainment usually does not produce anything valuable in our real world, and as a result, the joy of earning real money inside a game must be preceded by an act of taking it away from another player.

In order to create a P2E game which guarantees overall co-prosperity of players, we must ensure that playing the game actually produces real-life resources which can be exchanged with fiat currencies. But how? Well, the solution involves a bit of AR (Augmented Reality) and robotics.

All we need to do is gamify primary industries such as agriculture, forestry, fishing, mining, and others. Just allow players to rent their own robotic avatars and remotely control them via either VR/AR gears or their home computers. These remote-controlled robots will have the freedom to move however they want as long as they stay within designated playgrounds, such as farms, mines, and other areas in which various raw resources can be collected.

The game's graphics pipeline should be able to render these places as some sort of "dungeons", where crops are being displayed as enemy characters (such as monsters) that are programmed to play realistic death animations whenever they are being harvested by the player's robotic arms (The coarse mechanical features of which, of course, can be displayed as a mighty warrior's muscular arms holding a shiny sword and a shield).

Whenever a player completes an in-game quest such as "Harvest 10 avocados from a local farm" by putting them in a nearby bucket which is being monitored by a surveillance camera for score-tracking purposes, the game will pay that person a couple of pennies as a reward (which is possible because those who own the game will profit from the player's work). As long as the process of completing such a quest is fun enough, this mode of exchange will qualify as a P2E game.







:d:A thought an a possible alternative means of data storage.
:k:Analog, Analogue, Data, Storage, Geometry, LP, Record

[Analogue Memory Storage] 2022.12

When you download a 3D model from the internet, your computer stores it in the memory module as long lists of numerical values which refer to the coordinates of the model's individual geometric parts.

Such a method of representing a three-dimensional object, however, is not strictly necessary. What if we just let the computer 3D-print a miniature replica of the model and keep it somewhere within its physical space, and then 3D-scan it whenever the model needs to be displayed on the screen?

When a 3D model is supposed to be modified, the only thing the computer will have to do is simply disintegrate its existing replica and then reconstruct the newer version of it at the same exact spot.








:d:A personal memoir of life as a software engineer at Signal Studios, LLC.
:k:Signal, Studios, Signal-Studios, Bothell, Kirkland, Toy-Soldiers, Ascend, Sleeping-Prince, Call-of-Guardians, Seattle, Washington, Game, Videogame, GameDev, Steam, TS, GungHo, Ubisoft

[A Tribute to Signal Studios] 2022.12

<001_10>

This article is a personal tribute to the company which dwells in the most memorable place of my recollection, Signal Studios, LLC.

Before I delve into details, I would like to go over a brief introduction of Signal Studios for those who have not heard of their name.

Signal Studios, LLC, is a game development company founded upon the Greater Seattle Area of the Washington State, United States, in 2008. Their first major title, Toy Soldiers, was a major hit which delivered a great deal of success and popularity to the company in the early 2010s, subsequently allowing them to develop a number of other legendary titles such as Ascend, Savage Lands, and The Sleeping Prince. The studio then became rather silent for the following few years due to a bit of hardship which existed both internally and externally, and in 2019-2020 they resumed their genuine endeavors to revive their old videogame franchise by partnering with Accelerate Games, Inc, Outer Heaven, Eden Industries, and others.

I worked at Signal Studios as a software engineer from 2017 to 2019. The time was unfortunately rather short, yet it was the period during which I witnessed the most cherishing experience I could summon in the heartiest recess of my ever recurring daydream.

Here is my story.

I graduated from the University of Washington as an EE major during the summer of 2017. I was an international student back then, with the availability of the OPT (Optional Practical Training) program which allowed me to be authorized to work in the United States for at least a year after graduation, so I was quite desperate to grasp an opportunity to be employed by anyone in the field of engineering. The problem was that I did not have any prior engineering experience outside of academia - no internship, no extracurricular engineering activitiy, no participation in any of the open source projects, and so on. Many of my colleagues were quick to have their resumes already filled in with all sorts of glorious titles, along with names of large corporates (e.g. Google, Amazon, Facebook, etc) with whom they had established cordial relationships by the time they were ready to graduate. I, on the other hand, was not so keen enough to discern the practical implication of this and simply maintained a rather foolish belief that being knowledgeable in one's field of expertise would be a sufficient factor for being recognized as a talented (and therefore employable) individual.

I recall attending the university's career fairs as well as submitting at least hundreds of job applications throughout the span of more than a half of my senior year, which were all in vain. Most job openings, including those which even stated that they were looking for "entry level" engineers, required candidates to have already gone through at least 2 or 3 years of prior engineering experience. All of my applications were followed by either silence or formal rejection letters, which could be expected for obvious reasons. Years of study, personal projects, and other efforts to understand the conceptual essence of theories in mathematics, science, and engineering, suggested nothing to them. All they wanted to see was a collection of quantitatively measurable metrics, which was understandable from a statistical point of view. As long as I had neither prior experience nor any acquaintance in the industry who would be generous to recommend me, I was nothing more than an utterly insignificant little rat which deserved not even a chance to have a 5-minute conversation with an engineering lead for the hope of proving its decency.

After another round of job search following the graduation, I became rather frustrated by the nature of formal recruitment processes and began to look for alternative routes. One of the informal approaches I took was to open up a Wikipedia page which had a list of videogame companies in Seattle, visit each one of their company websites, and send emails to their contact addresses asking if they could offer a chance for a recent engineering graduate to work for them. For sure, most of them did not bother to respond probably because they were either too busy developing games, had no currently available job openings, or just could not risk their precious time and capital for training a novice.

And then, one of them responded.

The person who gave me the response was the lead engineer of Signal Studios at the time. He said that he would like to add a programmer to the team, and asked me to send him examples of my engineering work. I sent him the source code of one of the assignments I did in the Digital Image Processing class, and upon receiving it, he got interested and invited me for a brief interview.

It was the summer of 2017, and the air of the Pacific Northwest was warmer than ever. Their office was located in one of those serene suburbs of Bothell, amidst of which were nothing but a few Canadian geese discharging their green feces and a breakfast cafe which had the most delicious English muffin sandwiches I've ever witnessed (In case you wonder, it's "Parkside Deli" in North Creek Parkway Center). When I entered Signal Studios' office room, I was quite surprised to find out that they did not seem to have any apparent intention to "test" me with trick questions or any other means of obscure technical challenges. They did indeed present me with a couple of engineering problems to see the way in which I would approach them, but those were rather casual and were not bound to any specific programming language, development framework, or any of those typical Google-interview-ish algorithms that would appear in a Computer Science textbook. Rather, these were purely conceptual yet practical questions in game development, such as "How would you implement multiple game worlds inside a level-based videogame such as Super Mario Bros?", and so forth.

And the most glistening impression I acquired during the interview was that they were kind enough to explain in detail what they were doing in their current game development project, as though they already had me in mind as their new fellow engineer. They then proceeded to explain that it is not of their primary interest to seek experts who know specific technical standards such as programming languages, jargons, and other petty details which a typical senior programmer with many years of experience may possess but do not necessarily reveal one's aptitude as a true professional (I could tell that they really meant it, since I openly acknowledged that I didn't even know the meaning of the word "singleton" in the context of software engineering during the interview and they were completely fine with it). They said that, as long as an individual is "teachable", there will always be a room for unbounded growth.

The meeting was quite brief, and they told me that they would give me a response within about a week or so. Contrary to my expectation that at least a week would pass in silence, they responded in just a single day saying that they would like to have me as their new team member.

And thus I was blessed with the most graceful decision of theirs.

Now, some of you might raise an eyebrow and say, "Oh, come on! They probably hired you just because they wanted a cheap intern to help complete their project with as little budget as possible. You were simply being used because of cost-effectiveness!" Before such a presumption provides itself with a chance to fill your senses with an air of cynicism, please let me clarify one thing that would be a shame if neglected. First of all, they did not hire me as an intern, nor did they pay me any less than an average American software engineer, ever since the very first day of my career at Signal Studios. They didn't even deduct a penny off of their hourly payment for the first week of my period of contract, which was solely dedicated to training me for the purpose of getting me on board without expecting any direct contribution to the project. This was quite an exquisite blow in my mind, as you may be able to tell, since they clearly possessed every opportunity to carry things out differently to their own advantage.

Note that I was an international student back then, with only a temporary chance of work authorization and absolutely zero career experience. I had no connection with anyone in the industry, nor had I won any prize or participated in any major activity to complement the sheer desolation of any enticement to brand myself as a ready-to-use human resource. I had none of those elaborate focal points of self promotion.

Yet, Signal Studios never chose to exploit this hint of desperation as means of extracting as much merit as possible from a beginner's fountain of passion with the absolute minimum cost. They technically could have hired me as an unpaid intern, as the first year of the OPT program allowed volunteer services to be part of their range of work authorization (as long as they were related to one's major). Or they could have at least reduced my hourly pay and backed up themselves with fine reasons such as, "We are spending lots of resources training you, so it factors as a part of the company's expense!", "You are learning from your job, so the value of the education you are receiving should be considered part of your compensation!", or, "You are an entry-level programmer, so you are not yet experienced enough to contribute with as much speed and efficiency as our experienced engineers do!", and so on. These strategies, however, which were so easy to pull off due to the feeble status and lack of negotiatory ability of mine, were nowhere to be found in them. Instead they hired me, compensated me, and respected me just as much as they would do in regard to an American software developer who had years of experience.

And not only that! They even paid me for every single extra hour I worked for them during weekends, without the slightest glimpse of exception, and later on (after several months or so) granted me a raise even though I never asked for it. It was as though they had completely tossed the notion of "cost reduction" outside of their window when the matter of employment was concerned.

Now, at this point of writing, you might be carrying in your mind an impression that I am some kind of superficial jerk who only cares about money and nothing else. Such a conception is understandable, considering that it indeed has been the pivot of the depiction of my early job experience so far. But before yielding a chance to this apparent bias to let itself draw an imaginary contour of a person whom you probably do not even know personally, please give me the freedom to resolve this potential prejudice by providing a short discourse in regard to the importance of rationality when it comes to the matter of deciding which acts of mercy should be embraced with the most cordial air of gratitude.

Oftentimes, we see groups of ambitious companies which brand themselves with catchy slogans such as, "We don't work just for money. We work because it is fun!", or, "Passion is what drives us to work hard. Money is not everything, and we are glad to be working in a place where everybody can make an impact!", and... you know, I am sure you have heard of such phrases quite a lot in the tech industry. Of course, things like "passion", "vision", "impact", and other cool-sounding ideas embellished with buzzwords can indeed be the main source of motivation which impels a developer to dedicate one's soul to the company's product. We must also be aware, however, that such a cloud of abstract values can just as well be employed by a cunning business owner for the purpose of undermining the significance of objective rewards when it comes to the nature of equity in the labor market, just to get away with as little wage as possible. And many developers, who are too pure in their own sphere of intellectual endeavors to pay attention to such intricate fragments of psychological manipulation, fall into this trap and simply rejoice in their own cage of metaphorical imageries.

What makes Signal Studios the greatest game developer of all from my point of view, is that they never utilized such a method to trick the naive mind of my younger self in any way for their own benefit. Instead of trying to lure me into believing in an abstract, intangible type of compensation by mesmerizing me with grand words and amorphous promises, they simply paid me generously. And you know what? This tells a lot about their immesurable sense of dignity in terms of honesty and straightforwardness.

It is a strictly objective standpoint of mine that, when it comes to being an employee (or a contractor) of a company, financial return should occupy the topmost row of one's priority list. Otherwise, why would a person give him/herself enough humiliation to sacrifice a huge chunk of one's time and energy fulfilling somebody else's goal? Why not just enjoy working on any hobby project of one's choice as an independent developer, if money is not of foremost concern? Do not get me wrong, I am not the kind of person who would exert every bit of mental effort to squeeze every penny off of someone's wallet while refusing to acknowledge the existence of any other dimensions of appreciation that are not tied to monetary interests. I believe in the importance of collective visions, as well as a mode of compassion that is being shared amongst my fellow developers. The problem is, such a subjective set of values should never be used as means of belittling the clemency of those whose blunt yet humble characters encouraged them to embrace their workers with unpolished pieces of diamond which are not grandiose by appearance yet nonetheless possess intrinsic values that are superior to glittering rainbow candies made up of cheap compliments, while they could have elegantly sugarcoated their reputation with subtle excuses and psychological trickeries.

It was not necessarily the absolute amount of cash I received from Signal Studios which made me beg to have an honor to say that I owe them every charmful of admiration. Rather, it was the strangely brute yet juvenile sort of innocence of theirs which inspirited me to have an insurmountable degree of respect and trust in them, outside of any worldly measures. They demonstrated that there could ever be on earth a private company, a body of business which is supposed to be optimized for profit only and nothing else, that operated on the hearts of warm-blooded people who sincerely cared for the well-being of all.

Aside from the absence of stinginess, there were other virtues in them which I was able to perceive with the inner lens of my heart. In order to provide a bit of background knowledge, let me describe in more depth the early days of my work at Signal Studios.

By the time I joined Signal Studios' development team, the company had already been working on a mobile multiplayer game project called "Call of Guardians". They were working with a publisher called GungHo, who had headquarters situated in both Japan and the United States. The course of the project's development was rather stressful to the whole team, as the company's staff had been greatly reduced in size and everybody had to wear multiple hats on some occasions.

I recall the chairman and the lead producer of Signal Studios painstakingly communicating with the publisher, trying to digest various feature requests coming over from multiple departments and laying them out in a way in which they could be handled by engineers/artists with relative ease. What I clearly remember is that these immesurably diligent people, despite the prevalence of moments of exhaustion caused by little morsels of miscommunication as well as dissonance between the publisher's design philosophies and those of their own, put their maximum level of exertion to guard their developers from the pain of endless design reiterations by resolving as many technical discords as possible on their side.

But please don't get me wrong! It is not my intention to blame the publisher for anything. GungHo was a great company to work for; some of their own engineers, who used to provide technical advices regarding the project, were highly insightful and deeply sincere in terms of helping the studio overcome any of the development challenges. Both the publisher and Signal Studios were nests of heartful professionals, who worked day and night pouring truckfuls of their juice of dedication into the cradle of their endearing product.

Nevertheless, the atmosphere of frustration was quite real on the development side due to the presence of seemingly trivial yet cumbersome reasons, which were little bits of discrepancy between their creeds and those of GungHo regarding the technicality of how exactly the game should be designed and implemented. The thing which impressed me the most during this time period was that both the CEO and project manager carried all the burden of this nuisance on their backs and assured the rest of the team with an implicit voice of a paternal figurine which echoed, "It's all right. We've got everything taken care on our side, so don't feel stressed out. Keep working at your own pace, and we will be responsible for the rest."

And I can reassure that it really was the case, as they constantly strived to minimize the necessity of extra work as much as possible by sculpting the publisher's requests into the most streamlined form. We still did spend quite a number of additional work hours during some of their busy weeks, but it was nowhere near the so-called "crunch mode" which many game development companies were notorious for (And again, I mustn't fail to mention that I got paid for every single one of these extra hours).

Another thing I've got to point out regarding the nature of the course of development that was happening at the time, is that the project was not particularly in a good shape by the time I joined the development team. The game as a whole was pretty laggy, and there were plenty of features that were yet to be completed. And to the team's frustration, the number of engineers had been drastically reduced almost down to zero by the end of the year. After a period of sincere mentorship provided by the lead engineer whom I appreciate with all my heart due to the sheer absence of any intention of his to withdraw any mouthful of knowledge from my learning brain for the purpose of gatekeeping, I was pretty much left alone to teach myself and discover solutions on my own. Yet, the CEO and project manager of Signal Studios respected me as a fully qualified engineering professional whom they could put their trust in with respect to making authentic choices, by granting me an almost full control over the whole engineering aspect of the project as soon as they perceived my capability of handling it with an insignia of integrity.

It would've definitely been a safer choice of theirs to use the inexperience and young age of mine as an excuse to immure me in a prison of micromanagement, for the purpose of converting me into a submissive droid who would do nothing but serve the egos of the top-level decision makers. Instead, they granted me an honor to spend time figuring out solutions to problems based off of my own engine of reasoning and intuition. This impelled me to extract every faculty of mine to polish the project with the utmost degree of elegance one could ever dare to imagine, for I feared I might disappoint and lead them to regret their choice of generosity otherwise. I studied the essence of game development by pinning down all sorts of bugs and feature requests as swiftly as possible, refactoring the codebase for efficiency and readability, as well as optimizing various subsystems of the game from low-level to high-level. And when some of the design specifications were hidden behind a fog of war due to the nature of uncertainty in game development, I squeezed every conceivable drop of mental energy from every conjurable corner of my subconscious for the joy of interpolating/extrapolating details outside of the formal domain of definitions and moved on to implement them. This momentum, which sprouted from the purity of respect they had endowed upon me, was unstoppable to the point at which it was mighty enough to shed the friction of productivity which was caused by my initial shortage of experience.

Day and night, an everlasting light of wonderment encompassed my mind with the question, "Is this job even real?", for it was too perfect for me to even fancy to fool myself to believe that I could ever deserve it. Every handful of work I was privileged to do inside their Bothell office was in favor of my undertaking to display a subtle kind of appreciation which I longed to express in words but in vain because the size of the feeling was too great for a bucket of literature to hold.

And here is even more to the story. When the company faced financial difficulties which rendered continued employment rather challenging, the CEO so graciously went on to introduce me to other companies whom he knew quite well, and recommended me as one of their prospective teammates in case he would no longer be able to keep me in his workforce. I didn't even ask for it, he did it voluntarily. Such an act of benevolence was a speechlessly unexpected welcome, that the memory of it appears almost surreal to me even to this day. What I saw in him was neither the pretentious energy of a venture capitalist whose wit is lit by a spotlight of self-importance, nor the shrewdness of a corporate boomer who would throne himself on top of a pile of ladders which were kicked down by the boots of mannerism and political tactics, but an evincement of genuine care solely directed to a fellow human being.

Every single moment I spent in Signal Studios was the most pristine intersection of every ray of delight, emanating from the prism of reverence which I always wished to hold a chance to rub further for the hope of seeing it shine forever. It was the most quintessential period of my life, full of growth, purpose, and unrestrained potentials, which will never return again. Those days had howled their farewell and the iron snowflake of honor which was courageously engraved upon the frail glass bottle of my Millennial soul had long been shattered into oblivion, but I will never forget their pure golden rain of kindness which showered upon the meadow of the Evergreen State.

Now, I am well aware that some of you might not agree with me in terms of the perceived characteristics of this company. As far as I can tell, the general reputation of Signal Studios is not so bright, contrary to the way in which I have hitherto been describing them. As a matter of fact, they have faced a notoriously long list of bitter criticisms both from the community of gamers and that of game development professionals. And you know what? I do understand those grim remarks and do acknowledge the validity of many of their arguments. The presence of certain "personalities" in Signal Studios did indeed suggest a possibility that there were rather bizarre interpersonal confrontations present within the team, which could sometimes be irritating to a considerable degree. Hence, the company used to be significantly bigger in size years before I joined them, so I can, by nature of extrapolation, deduce that a great deal of unpleasant drama and politics would have easily introduced themselves due to chaotic tendencies of a large team. The wondrous experience I had by the time I joined the studio might have been the result of many lessons which the company had to learn after years of struggles in regard to the dynamics of leadership and project management. Maybe I was just extremely lucky to have jumped into the right workforce in just the right time, and it could have been a completely different scenario if I joined them years before.

Nevertheless, the experience I personally had in Signal Studios was marked by pleasures of extraordinary fulfillment, regardless of whether or not mine was an exceptional case that was made possible by a collection of happy coincidences which most other people were not so fortunate to be part of.

And dear fellow supporters of Toy Soldiers, Ascend, and other titles of Signal Studios, who might be reading this article, please bear in mind that they are a group of developers who always strived to present us with a box of fun little toys not for the sake of scrapping off every penny out of naive juniors and quasi-gambling addicts, but for the sake of creating and sustaining a beautiful environment where people could work with an inexplicable sense of dignity. Whenever you happen to notice that they do not respond to your inquiries for an unreasonably long span of time, please do not interpret it as a sign of plain rudeness. Rather, please take it as a sign that they are just as frustrated as you are, considering the time of despondency they had to endure for the hope of reviving their past glories.






:d:A note regarding general-purpose AI.
:k:AI, Artificial, Intelligence, Automation, Revolution, Copyright

[Feeble Attempt] 2023.01

When a gun was invented, some people claimed that it would never replace bows because it took almost a whole minute to load a single bullet.

When a general-purpose AI system was invented, some people claimed that it would never replace humans because it failed to answer trick questions which could be answered by more than half of the population.

Regardless of what they are capable of at this present moment in time, machines will keep getting smarter and humans will keep getting dumber. It is only a matter of time until even the most sophisticated of intellectuals will eventually succumb to the wit of artificial intelligence.

And what can we do about it? Nothing.

If you are an artist, you may attempt to overthrow the reign of AI-powered arts by claiming that those pieces of work are just concoctions of real arts that are stolen from real artists - an act of crime which must be punished by intellectual property laws.

What if, however, the next generation of AI manages to collect data directly from the nature itself (by making observations with robotic eyes) and create stunning masterpieces based off of it? Will you say that the nature itself is copyrighted by mankind, then?

The real horror of generative AI is not what it is currently capable of; rather, it is the fact that it will continue improving regardless of whether we like it or not.






:d:A note on a different way of conceptualizing psychological phenomena.
:k:Psychology, Particle, Mechanical, Spatial, Psychoanalysis, Analytical, Freudian, Jungian

[Thought Particles] 2023.01

Just as physical materials can be thought of as groups of particles that have physical energy in them, our mental processes (such as emotions, memories, and so on) can be thought of as hypothetical particles that have psychological energy in them.

Thoughts are just as tangible as the so-called "rigid bodies" in Newtonian mechanics; they simply belong to a separate domain of existence, which can be described as the realm of collective unconscious as opposed to the realm of physical phenomena.

These "thought particles", as opposed to point masses which make up our physical universe, exist inside a Platonistic space filled with pure ideas. Similar to how atoms establish bonds with one another to form molecules, our thought particles connect with each other for the purpose of formulating more complex ideas.

<003_01>






:d:An article about software toys.
:k:Software-Toy, Game, Engine, Edutainment, Educational, Videogame, Tool, UI, UX, Software, Toy, Sandbox

[Making Profit as a Game Developer] 2023.01

The game industry is a pretty saturated niche in the world of business. Competition is tough because way too many people are aspiring to become game developers, and it seems to us that one can hardly create and sell a profitable game without an insane degree of marketing budget these days. The digital marketplace is being flooded with countless numbers of brand new games which continuously pour out of the hands of both indie and AAA game developers on a daily basis, and it appears that even "being creative" is not an economic choice that will save one from this neverending struggle because nearly everyone is "creative" in today's world. How many countless times have we seen all sorts of quirky, out-of-box ideas showcased by random indie developers we hadn't even heard of before? I cannot even count such occasions because there are plenty and they all scream in unison, "Look! Look at me! I am special! I am different from anyone else!"

Because of such high competition, some game developers have chosen to abandon the idea of developing the actual end-product called "game" and shifted their attention to developing a game engine instead. Such people, most of them being hardcore engineers rather than either game development generalists or artists/designers, could be said to have circumvented many of their inherent difficulties by solely focusing on developing a kind of product which they are experts in developing (since a game engine does not necessarily require the talents of artists/designers due to its generic nature).

Making profit out of a game engine, however, has its own set of difficulties that are probably even worse than those which belong to the case of selling an actual game. Whereas marketing a game suffers from the problem of over-supply (because too many people are creating/selling games), marketing a game engine suffers from the problem of under-demand. First of all, only a tiny fraction of the population are game developers, and this factor alone contributes to a drastic reduction of the consumer base. Within this tiny fraction, there are hardcore engineers who prefer to build nearly everything from scratch (aside from the usage of external graphics, sound, and physics libraries) and therefore do not require a game engine. The rest might choose to utilize a game engine, yet we must be aware that the majority of them are doing so for the highest level of efficiency and thus tend to choose the most popular game engines which convey the utmost degree of community support and cross-platform compatibility (such as Unity or Unreal) instead of engines that are being developed/maintained by relatively small groups of people.

When it comes to game development, what we face is a fairly high level of demand but an even higher level of supply. And when it comes to game engine development, what we face is a fairly low level of supply but an even lower level of demand. So what we can easily recognize here is that it is a considerable challenge to make profit out of both a game and a game engine for two opposite reasons.

There is a delicate middle ground that can resolve this dilemma, however.

<003_02>

If we consider games as belonging to the left side of the spectrum of market niches and game engines as belonging to the right side of it, we can enable ourselves to draw two separate curves corresponding to the level supply and the level of demand, respectively.

On the left side, we have the so called "game industry" which is flooded with almost all genres of games, whether they be casual or hardcore, single-player or multi-player, RTS or MOBA, and so on. This cluster of niches, obviously, have extremely high supply due to the fact that so many people with a variety of backgrounds have a tendency to pursue their dreams as game developers. Since a game is more of an interdiscipinary form of art rather than a highly specialized piece of technology that is only comprehensible by a few (such as, say, a control module for a nuclear fusion reactor), it can be developed and published by any nearly anyone. And this is even more so nowadays due to the presence of free game development tutorial videos on YouTube, free and easy-to-use game engines which do not even require text-based coding, and assets (e.g. 3D models, textures, etc) that can be downloaded from the internet for relatively small (or even zero) prices. And even if we assume that the public's demand for videogames is pretty high, it will be rash to dare to suppose that it is high enough to overcome the insanely high level of supply. After all, games do not occupy the top of the pyramid of our spendings, do they? We do not "consume" games in the same sense that we consume food, electricity, and tap water, since games are not absolutely necessary for sustaining our lives; hence, the same exact games can be replayed over and over again indefinitely (since a piece of software does not degrade over time), which technically implies that we do not really need brand new games as long as old ones still manage to entertain us.

On the right side of the spectrum, we have the "game engine industry" which is a much narrower niche than the so-called "game industry". From a supply point of view, it looks like competition in this arena is much more relaxed because far fewer people are undertaking their own colossal journey of creating a game engine. A game engine is an extremely sophisticated system that is way more massive in scale than games (with a few exceptions such as those which belong to a large-scale simulation genre), and therefore only a relatively small portion of the population possesses the willingness to create/sell game engines. The problem with this, as I have mentioned before, is that there is only a small group of consumers who are willing to pay for a game engine unless it is sufficiently popular and is part of the industry standard. Besides, game developers are pretty darn smart compared to the rest of the population to whom the entertainment industry's childish monetization tricks can appeal with relative ease, so they know how to minimize their spendings when they are developing their own games.

Here is a solution.

We have the choice to put ourselves in the middle of the spectrum, in which one is expected to develop neither a game nor a game engine, but instead a "software toy". A software toy is similar to a game in the sense that the user can still play around with it, interacting with its components in real time without having to delve into boring technical details such as scripting, folder structure management, importing/exporting resource files, and so forth. Yet, it is not quite the same thing as a game because it does not spoon-feed the user with any specific narrative, nor does it present the user with any fixed set of rules under which he/she will be either rewarded or punished. It is not a game engine either because its apparent capabilities are not as generic as to allow the user to create virtually anything out of nothing. Minecraft, for instance, could be considered a software toy rather than a game engine (although you could technically create a mini game inside a Minecraft world) because it presents the user with a set of built-in gameplay elements which are quite limited in scope. One cannot create a game inside Minecraft whose underlying mechanics are based upon smooth surfaces or microscopic particles, for example, since Minecraft's possibility space is confined within the domain of discrete block-based interactions.

The boundary between a game and a software toy can sometimes be quite blurry, as there are sandbox games (or "god games") which focus on providing the player with the utmost degree of freedom whilst also providing him/her with a set of goals and plots to follow. Minecraft, Garry's Mod, Kerbal Space Program, Factorio, SimCity, The Sims, and many other simulation games fall into this category. On the other hand, we may as well state that the boundary between a game engine and a software toy is pretty vague as well, since some of the educational game engines such as Scratch, Kodu Game Lab, and Greenfoot are so easy to use (compared to professional engines such as Unreal, of course) that they have entertainment values in their own right.

<003_03>

Despite this perceived ambiguity, however, we can still somehow distinguish software toys as their own independent category due to the agreed upon notion that we are often reluctant to classify them as either games or game engines in a definite sense.

So, what's so amazing about software toys? The fact that they are a sort of "gray" beings, which belongs to neither of the two extremes of the spectrum, suggests that their market niche is a Goldilocks zone in terms of having a chance to make profit out of it. They occupy a fuzzy middle ground upon which the two curves (i.e. supply and demand) can potentially meet and even reveal a crossover. Since a software toy is not a game, passionate game developers who have stuffed their hearts of ambition with all sorts narrative and artistic elements are hesitant to develop such a thing. And since a software toy is not a game engine either, hardcore engineers who are not willing to sacrifice their coding time rendering their software product sufficiently easy to use as to be able to let laymen directly play with it are hesitant to develop such a thing.

Aside from low supply, what we can also observe is that the relative level of demand for software toys is not too low. It is not as high as to let ourselves state that their brand values support the existence of a massive fanbase (such as that of an eSports-type of game), yet we may as well expound that the availability of demand for software toys in a variety of small niches compensates for the apparent lack of boiling passion in any one of them.

A software toy, under a supposition that it is well crafted and user-friendly, can find its use cases in the fields of education, training, research, content creation, and many other areas which are not very often being associated with the game industry. A moderately entertaining yet thought-provoking software toy, since it is an interactive medium that may not be as fun as a typical videogame yet nevertheless far more engaging than a book, easily finds its usage in education where the teacher often struggles to gain his/her students' attention. A software toy with realistic physics may find its use in serious training applications in military, medicine, and other high-risk fields of expertise in which simulations must precede real practices. Academics may find a software toy a sufficiently explorable subject of study, that they would start researching its inner workings in a professional manner. Some hobbyists who are not hardcore gamers and are looking for a piece of entertainment that is somewhat more "intellectual" than mere beat-em-ups and betting rounds, may find a software toy interesting as well.

The following question is, "What kind of software toy should we create in order to make money off of it, then?"

One can think of many choices, including industrial simulators, traffic simulators, a purely exploratory sandbox game which excites the intellectual mind of a science lover, an accounting/tax simulator that is somewhat more casual and entertaining (with the help of a few gameplay elements such as progression (e.g. level-ups)) than, say, TurboTax, and so on.

The trickiest aspect of the development of any of these is that they are too broad in scope. A typical videogame would simply require the developer to focus on a specific genre of gameplay, such as racing, battle, defense, etc, so it is pretty narrow in scope. A typical game engine, despite its colossal scale in terms of the sheer variety of things which can be implemented on top of it, is quite narrow in scope from a contextual standpoint because it merely serves as a "common template" for developing a virtual world, rather than a world which exists for the sake of its own existence.

So to summarize, a software toy could be conceptualized as a virtual universe which exists on its own without requiring any external agent to bring it into existence, yet does not immure itself in a specific set of narratives. Devising such a product is a highly sophisticated task, and requires a great deal of insight.

One clue we do have is that a nicely designed software toy consists of a fairly small number of emergent elements, each of which is easy to conceptualize while also being robust enough to give birth to myriads of interesting scenarios when applied in combination with one another. Examples of such elements include:

(1) A "crafting table" through which the user can combine ingredients to produce new types of items.

(2) Dynamic physical installations (doors, switches, elevators, conveyor belts, etc) which are capable of modifying the spatial characteristics of their surrounding areas under the occurrence of specific events. For instance, opening a door creates a connection between two discrete spaces which used to be separate from each other.

(3) Different types of AI agents which behave differently under the exact same circumstance. Type-1 agents may only move, type-2 agents may only attack, type-3 agents may move AND attack simultaneously, type-4 agents may heal others but only when they have enough energy, and so on.

<003_04>

A virtual world in which these elements exist from the very beginning of user experience, without assuming that the user will take time manually devising them out of nowhere, is a toy that is not necessarily a game (because the presence of such emergent elements do not necessarily present the user with narratives), yet not a game engine either because it is not the user who is inventing all the individual gameplay elements. A software toy, in this respect, could be defined as a "partial game engine" - an engine that lets us create and customize parts of the game while still preserving some of its core mechanics as the backbone of the system which cannot be modified. The coexistence between customizability and immutability is the heart of a software toy, which presents us with a fountain of endless goals by keeping its level of freedom neither too low nor too high. It is because too little freedom (as in a story-driven arcade game) limits the scope of motivation, while too much freedom (as in general-purpose editing programs such as Photoshop and Blender) hardly motivates the user to undertake any adventure at all.






:d:A note on visualizing logic as individual geometric modules.
:k:Idea, Platonic, Relations, Logic, Relational, RDBMS, SQL, MySQL, Predicate, Computational

[Idea Space] 2023.01

What is an idea?

We live in a world which consists of two distinct domains; one belongs to the realm of physical beings (i.e. Things we can see, touch, smell, and taste), and the other one which belongs to the realm of pure, abstract ideas. An apple belongs to the domain of physics, yet the idea of an apple belongs to the domain of ideas.

Just as a universe of physical phenomena can be modeled as a physical space which consists of spatial dimensions such as X, Y, and Z, a universe of our mental conceptions can be modeled as an "idea space" in which every single point in its coordinate system can be thought of as the most indivisible, "atomic" idea our minds can ever conceive.

Such atomic ideas serve as building blocks of more complex ideas. They establish connections with one another which represent their mutual relations. For example, the algebraic expression "A=B" is a molecule that is made out of 3 atomic ideas which are indicated by symbols "A", "=", and "B", respectively. "=" has two sockets to which other atoms can bond, since it is a binary operator which requires the availability of two input values in order to produce an output value (i.e. which is either TRUE or FALSE). "A" and "B" have their own sockets as well, both referring to their respective values. The result is that the (meta)physical laws of our idea space allow these 3 atoms to bond together in a form that is reminiscent of a water molecule (H2O).

<003_05>







:d:An article about a potential usage of functional programming in game development.
:k:Game, Functional, Programming, LISP, Scheme, CommonLISP, CLISP, Racket, Clojure, OOP, Declarative, Data-Driven

[Functional Programming for Game Development] 2023.02

Game development is often being done in a highly object-oriented mindset. This is not only because the vast majority of gameplay engineers program in object-oriented languages (such as C++, C#, Java, etc), but also because the way a videogame operates can easily be modeled as a collection of discrete, independent objects.

A videogame comprises a number of gameplay elements, such as individual game mechanics, narrative elements, dialogues, agents, boids, actors, impacts, cutscenes, scenarios, and so on. And these are all distinct, highly separable entities which are based off of different faculties of mind. A dialogue and an explosive effect, for example, may be related with each other via a segment of conversation such as, "NPC 1: Hey, look! There is an explosion!", yet they both can be implemented independently of each other because the articulation of neither of them requires the full avilability of the other. A writer doesn't require an actual, functioning explosion to be able to mention that there is an explosion, and a VFX artist doesn't require an NPC's description of the explosion's narrative implications in order to be able to implement an explosive impact.

And because of this nature of high modularity during the course of game development, a game's underlying software framework is almost always being modeled under the principles of object-oriented programming. Every "thing" inside a videogame is essentially an object, each of which is a state machine operating on its own (as a standalone system). When combined with one another via loose chains of causality, these objects give rise to all sorts of interesting phenomena based upon their mutual interactions.

However, the object-oriented approach also creates plenty of rooms for countless bugs and glitches, which may arise from the fact that a state machine's inner workings heavily depend on the exact timing of when something happens (which means the order of input values must be precise), as well as that there are multitudes of encapsulated bodies of state existing in a concurrent fashion, whose actions may contradict with each other (e.g. Conservation of energy being violated due to two explosions spawning out of a single bomb because of bad timing, etc). One might be able to prevent such scenarios by introducing some kind of buffer to the overall decision-making process by means of message-passing, queueing, and so forth, yet these methodologies add additional layers of complexity to the architecture.

A neat solution to this is to switch one's programming paradigm to an entirely different one. Take functional programming, for example, in which modifiable states are almost completely excluded from the computing environment's data management scheme.

Inside a purely functional framework, any changes in the state of the application simply undergo the process of being "appended" on top of the state's history (similar to how append-only databases work, such as a blockchain), which nicely solves the problem of race conditions. Since the system never tampers with existing state objects (which are, in a functional programming language, nothing more than function calls sitting inside the application's stack memory), external references which are still pointing to past instances of the state do not have to worry about their procedures making an unexpected turn due to sudden in-between data modifications.

One of the biggest challenges in the adoption of a declarative programming paradigm in game development is the conceptualization of time. The exclusion of the concept of time in a non-imperative language such as LISP, for instance, is both a blessing and a source of confusion. When we are making a game, we are essentially creating a virtual world which has its own timeline. As time passes by, various events happen inside the game's own environment at designated points in time, based upon their own time-dependent schedules. Such a temporal aspect of gameplay is what typically leads engineers to simply fall back to imperative programming when developing the core mechanics of the game, even if they may be great advocates of declarative syntax when implementing modules that are time-independent (e.g. interpretation of data, procedural generation, etc). However, it is my personal conviction that such a multi-paradigm approach is not necessarily the best solution.

In an imperative programming language such as Java, one can easily implement time-related gameplay mechanics by creating an Actor object, letting it have a queue of pending actions (e.g. represented as an array of tuples, each of which is made out of the expected time of occurrence and a function body that must be executed when the time is reached, etc), and then updating this queue whenever the Actor's update-function gets called at each frame of the game loop. This way of implementation, while it is highly intuitive and handy, often leads to a wide spectrum of bugs which may be too subtle to even find out before releasing the final product. The existence of tens or even hundreds of such time-dependent queues, all potentially interacting with one another in real time, is prone to give birth to countless unimaginable scenarios due to race conditions, co-occurrence of mutually contradictory events, and many other ensuing complexities.

Functional programming comes to our rescue when dealing with such difficulties. Since it avoids modifiable states as much as possible, it nicely prevents us from having to worry about our sources of computation (e.g. variables) unexpectedly being corrupted in the middle of computational processes. One might argue that the principle of encapsulation circumvents such a concern, yet it should be noted that having to decide which pieces of data should be public and which of them should be private is in itself a cumbersome and error-prone process.

If only we can represent gameplay in terms of a cascade of function calls instead of a group of independent objects, wouldn't it be great? That way, we will have the advantage of keeping everything in the game application as part of one large hierarchy of procedures, each of which only has access to its local state (e.g. variables that are either passed in as its function parameters or are locally declared) and nothing else. This means that all dependencies will have to be injected by means of arguments, which inevitably turns the overall syntax to be a bit verbose, yet nevertheless gets rid of any chance of interference which may otherwise be exerted to/from outside entities.

Let us start with a simple game loop. Any real-time game engine, as far as common sense goes, contains at least one "update" procedure which runs itself on a periodic basis. A typical object-oriented way of implementing it goes like this:

#$
class Game
{
    private State state;

    Game()
    {
        state = new State();
        Thread.start(updateLoop);
    }

    void updateLoop()
    {
        while (true)
        {
            state.update();
            Thread.waitForNextFrame();
        }
    }
}
new Game();
#$

It is conventional of an OOP-centered programming language, such as Java or C#, to start embodying a game application by first making a class that represents the game as a whole. Inside this "home class", where everything related to the game is supposed to begin its life, we create the game's state object and then run a thread which periodically updates it on a per-frame basis. This is a pretty neat way of running the game, except that here we are already introducing quite a degree of complexity to the whole system despite not having done anything substantial yet. The "Game" class in the above example has its own constructor method, an "updateLoop" method which runs within its own thread, as well as an internal state object which requires extra care for encapsulation so as to only let it be modified from within the update loop and nowhere else. The "updateLoop" method's internal "while" loop must make sure to execute its internal procedures in the right order, while also making sure that their execution can be carried out safely along with things that are happening in other threads (e.g. networking thread, rendering thread, etc). Furthermore, the instantiation of the "Game" class must be done in the right order (i.e. after all of the external systems to which it depends have been initialized, yet before systems which depend on it are yet to be initialized). The peril of object-oriented programming is that it has a tendency of giving birth to a complex web of interdependencies, no matter how much we try to simplify our system.

A purely functional equivalent of the game loop system, on the other hand, could be written as below (in LISP).

#$
(defun update-loop (state)
    (wait-for-next-frame)
    (update-loop (update-state state)))
#$

As you can see, there is no such thing as a class here. The entire game loop is just a single function call (namely, "update-loop"), which calls itself at the beginning of each frame by means of tail recursion. The game's state object is simply a parameter which repeatedly gets passed into the update-loop function as the only dependency, and by this, we can guarantee that the update loop is a purely functional system which does not interact with anything outside of its body. The "(update-state state)" function call returns the updated version of the current game state, and its definition is shown below.

#$
(defun update-state (state)
    (make-state (update-actors (get-actors state))))
#$

The "make-state" function, as you may have already guessed, creates a newer instance of the game's state and uses it as the input state of the next "update-loop" call instead of just modifying the existing state object. The reason behind this is that we want to prevent any potential race condition which may occur if other systems happen to be accessing/modifying the same exact instance. The "update-actors" function, just like the "update-state" function, returns the updated version of the current state of the game, but only the portion which pertains to its collection of actors (aka "characters", "sprites", or "agents") and nothing else.

#$
(defun update-actors (actors)
    (cons (update-actor (car actor)) (update-actors (cdr actors))))
#$

The chain of "cons" nodes, as shown above, is more or less a LISP construct which may not apply to other languages. The overall idea, however, applies quite universally. Every time we update the list of actors, we build a brand new list by cons-ing the newer instances of the actor objects in a recursive manner instead of just modifying the existing list.

<003_06>

This, again, is for the sake of preserving the entire history of state changes instead of tampering with the past remnants which may be still waiting to be visited by extraterrestrial beings (aka "external systems") whose present moment in time could have been delayed by as much as a few milliseconds, due to the nature of time dilation (special relativity) which oftentimes inadvertently gets simulated by the lack of perfect parallelism in modern computing devices.

The "update-actor" function checks to see if the "actor" argument it received is just the end of the list (i.e. nil). If so, it won't do anything. If not, it will proceed to search for the actor's own update function by means of "(get-actor-update-func actor)" and then execute it in order to get the updated version of the actor object. This newer instance of the actor, just like the aforementioned ones, is something that is completely separate from its past copy.

#$
(defun update-actor (actor)
    (cond ((= actor nil) nil)
        (else ((get-actor-update-func actor) actor))))
#$

And in order to run the game as a whole, we must start the game's loop somewhere. This involves the creation of the initial state, as well as the manual invocation of the update loop based upon that initial state.

#$
(update-loop (make-state initial-actors))
#$

But of course, the game itself consists of not just a list of actors but also many other things. This is not too complex a problem to solve, though. All we have to do is implement additional data types and their corresponding "get" and "update" functions, and then insert them into the game loop as additional function parameters.

#$
(defun update-state (state)
    (make-state
        (update-actors (get-actors state))
        (update-cells (get-cells state))
        (update-events (get-events state))
        (update-particleEffects (get-particleEffects state))
        (update-soundClips (get-soundClips state))))
#$

One major advantage of using this purely functional, append-only approach to the implementation of a game loop is that, since we are preserving the history of the game's state instead of constantly overwriting it with more recent bits of data, the game's update functions can have full access to the state's past instances and therefore make decisions based upon the differential characteristics that can be derived by comparing the past and present (which means it opens up the gateway to the realization of first-order, second-order, and even higher order systems which often occur in physics/engineering and are represented in terms of differential equations). This is easily done by passing the copy of the state from the previous frame (aka "past instance") into the update loop as an additional argument.

<003_07>

#$
(defun update-loop (currState prevState)
    (wait-for-next-frame)
    (update-loop (update-state currState prevState) currState))

(defun update-state (currState prevState)
    (make-state
        (update-actors
            (get-actors currState)
            (get-actors prevState))
        (update-cells
            (get-cells currState)
            (get-cells prevState))
        (update-events
            (get-events currState)
            (get-events prevState))
        (update-particleEffects
            (get-particleEffects currState)
            (get-particleEffects prevState))
        (update-soundClips
            (get-soundClips currState)
            (get-soundClips prevState))))

(defun update-actors (currActors prevActors)
    (cons
        (update-actor (car currActors) (car prevActors))
        (update-actors (cdr currActors) (cdr prevActors))))

(defun update-actor (currActor prevActor)
    (cond
        ((or (= currActor nil) (= prevActor nil))
            nil)
        (else
            ((get-actor-update-func currActor prevActor) currActor prevActor))))
...
#$

One of the specific use-cases of such a temporal stream of data lies on the area of kinematics. For a quick demonstration, let me first suppose that the "get-actor-update-func" function returns the "update-kinematic-actor" function if the type of "currActor" is equal to "kinematic". This means that, if the actor we are updating is of type "kinematic", the "update-kinematic-actor" function will be used update it. This function takes both the current and previous instances of the actor as its input parameters, and computes/updates the actor's current position based on the comparison of its two instances in time (which reveals its current velocity).

#$
(setf actor-update-func-table () '(
    ('static update-static-actor)
    ('kinematic update-kinematic-actor)
    ('dynamic update-dynamic-actor)
    ('abstract update-abstract-actor)
))

(defun get-actor-update-func (currActor prevActor)
    (get-actor-update-func-iter currActor actor-update-func-table))

(defun get-actor-update-func-iter (actor table)
    (cond
        ((= (caar table) (get-actor-type actor))
            (cdar table))
        (else
            (get-actor-update-func-iter actor (cdr table)))))

(defun update-kinematic-actor (currActor prevActor)
    (let ((currVelocity (- (get-position currActor) (get-position prevActor))))
        (make-kinematic-actor
            (+ (get-position currActor) (* currVelocity 0.8)))))

(defun make-kinematic-actor (position)
    '('kinematic position))
#$

One might argue, "Well, why bother introducing such a bloated system, just to update the positions of the individual actors? Why not just let each actor have its own 'velocity' property, so that it can simply update its position at any moment in time base off of the explicitly specified velocity value?"

For a simple problem of kinematics, such a solution is sound indeed. It is when we start dealing with more complex, implicit kinds of problems that we seriously begin to face inevitable rise in complexity. Let us consider, for example, that each actor is not a kinematic point mass but a self-conscious animal (i.e. living thing) which has its own set of memories, desires, feelings, metabolic states, and other biological processes whose causal relations are not necessarily instantaneous in time (as opposed to atomic events in Newtonian mechanics such as application of force or displacement of a particle), but rather prone to emit delayed influences upon points in time that are quite far apart from one another. The constructor of such an organic entity will have to look like this:

#$
(defun make-animal-actor (physicalTraits mentalTraits physicalMemory mentalMemory)
    '('animal physicalTraits mentalTraits physicalMemory mentalMemory))
#$

"physicalTraits" and "mentalTraits" are both fixed lists corresponding to the intrinsic physical/mental characteristics of the animal, whose contents are not meant to be changed under usual circumstances. These two lists, therefore, can be said to be time-invariant. "physicalMemory" and "mentalMemory", one the other hand, indicate the most recently added elements of the two streams of data (which represent the history of the animal's physiological state and the history of the animal's psychological state, respectively) which continuously circulate their elements as time passes by in the form of a queueing system. At each update loop of the game, newer memory elements enter these streams via the animal's sensory organs (i.e. external stimuli), while memories that are sufficiently old get discarded becasue these streams cannot keep growing forever (unless the computer is endowed with infinite memory space). The animal makes decisions based on both its most recent memories as well as past memories that are extracted from its past self, and produces a newer copy of itself which corresponds to its future self.

#$
(defun update-animal-actor (currActor prevActor)
    (let ((physicalTraits (get-physical-traits currActor))
            (mentalTraits (get-mental-traits currActor))
            (currPhysicalMemory (get-physical-memory currActor))
            (prevPhysicalMemory (get-physical-memory prevActor))
            (currMentalMemory (get-mental-memory currActor))
            (prevMentalMemory (get-mental-memory prevActor)))
        (make-animal-actor
            physicalTraits
            mentalTraits
            (make-physical-memory currPhysicalMemory prevPhysicalMemory)
            (make-mental-memory currMentalMemory prevMentalMemory))))
#$

The example shown here, however, only allows the animal's memory to refer to only 1 step (frame) back in time, which suppresses its ability to make long-term decisions based upon long-term memories. If we want to simulate realistic physiological/psychological phenomena, we will need streams of memory elements that are sufficiently long so as to allow each animal to look up not only its most and second most memories, but also memories that were created minutes ago, hours ago, days ago, or even months ago.

The realization of long-term memory streams can easily be done by adding additional references to the game's past, as shown below. "prevState2" refers to the past instance of the game's state that was made 2 steps back in time instead of just 1.

#$
(defun update-loop (currState prevState prevState2)
    (wait-for-next-frame)
    (update-loop (update-state currState prevState prevState2) currState prevState))
#$

And if we want the game to be able to refer to up to 3 steps in time instead, we will need something like:

#$
(defun update-loop (currState prevState prevState2 prevState3)
    (wait-for-next-frame)
    (update-loop (update-state currState prevState prevState2 prevState3) currState prevState prevState2))
#$

<003_08>

This, of course, starts to become too verbose as we keep elongating the game's memory stream. Therefore, a much more realistic implementation would be to represent the history of the game's state as a single list variable rather than a sequence of manually specified function arguments.

#$
(defun update-loop (stateHistory)
    (wait-for-next-frame)
    (update-loop (cons (update-state stateHistory) (without-last stateHistory))))
#$








:d:An article on the fears and hopes of the upcoming age of general-purpose artificial intelligence.
:k:AI, Automation, 4th, Fourth, Industrial, Revolution, Monopoly, GenerativeAI, ChatGPT, OpenAI

[Surviving the Reign of AI] 2023.05

As technology progresses, more and more jobs are being taken away by machines due to the nature of automation.

This has almost always been the case ever since the beginning of the Industrial Revolution, and has recently been accentuated due to the popularization of AI and machine learning in the realm of information technology.

As of the time of writing, even intellectually sophisticated activities such as fine arts, music, programming, literature, video production, and others are on the verge of being overtaken by the ingenuity of robotic minds. Their qualities are not as yet sufficiently intricate as to be able to replace the majority of highly skilled human professionals, but they do continually improve themselves and their cost-effectiveness is already great enough to undermine the necessity of hiring and training some of the entry-level practitioners.

We are living in an age of endless uncertainty, where no fixed skillset seems to endow an individual with the ability to become a unique part of one's profession by means of serving the role of an irreplaceable expert. As machines successfully take over more and more skills which used to be reserved for mankind before, an individual gets more and more frequently lost in the vast ocean of possibilities, constantly searching for random fragments of knowledge to learn and trying to adapt him/herself to the ever-changing environment. Preserving one's original identity is becoming more of a luxury, and one has no choice but relentlessly keep running on top of a treadmill which is designed to lead nowhere but barely sustain one's role as a parrot of the society's collective consciousness.

Where is individuality in today's world? As technology keeps replacing more and more portions of the pool of human intellect, where should we find a key to unlock a door which will lead us to yet another secret garden of humanity which is yet to be tainted by the tyranny of mechanization?

In order to find out a clue to this fundamental inquiry, we must first contemplate upon the meaning of individual uniqueness in our modern world as well as the problems which have been impairing it, and then try to define the most ideal future scenario to which mankind should aim to propagate itself.

First of all, let us ignore the presence of today's AI technologies for now and investigate the nature of life and society as a whole, for AI is just the tip of an iceberg compared to the overall trend which has already been exhibited by the modern world for centuries. It roughly began with the early Industrial Revolution, and proceeded to illuminate its own presence through the course of globalization.

(Background)

The reason why a person usually wants to be "unique" in one's field of expertise is that it is an indicator of a relatively high degree of competence when it comes to the irreplaceability of one's role as a member of the society. And it used to be far easier (as long as sufficient resources were given) back in the pre-industrial and pre-global era than it is today, due to a reason which I am about to illustrate below.

If you are a sandwich chef in a small village which is isolated from the rest of the world, it can be assumed that it is not so hard for you to stay as the most highly demanded creator of sandwiches in the entire community of people with whom you are interacting on a daily basis. Let's say that there are about ten thousand villagers in total, and let's suppose that they all rely on each other internally for most of their basic needs because there is hardly any direct exchange of resources between the village and the rest of the world. As long as you are the most skilled sandwich chef among these ten thousand villagers, you can assure that you are and will always be the most demanded/loved provider of sandwiches within your local community. You do not need to care if there are other sandwich experts outside of your village who are more competent than you are, since you have your own "homeground advantage" which prevents you from being replaced by those outsiders. Most villagers will rather eat your sandwiches than try to venture outside of the village just to taste other sandwiches which might taste better than yours (The amount of effort it takes to travel is likely to discourage such an endeavor).

Once your village opens itself up and gets engaged in active commerce with the external world, however, everything changes. You are no longer guaranteed to remain as a competent chef because there are probably countless others outside of your village who are better at making sandwiches than you are. Suddenly you find yourself having to compete with not only your ten thousand fellow villagers, but also with billions of strangers living all across the globe.

This is one of the side effects of globalization; you no longer possess the home advantage you used to have back in those days when people's domain of production and consumption was more or less confined to their own local area of residence due to physical limitations. Nowadays we have railroads, freeways, international trade routes, high-speed internet which is capable of selling digital products (intellectual properties) all over the world at the speed of light, and other protocols which connect all of us together more closely than ever, yet also open up the gateway to the eventual widening of the gap between the ones who succeeded in dominating the entire global market and ones who did not. Over time, what is bound to occur is the eventual death of all businesses which fail to become the absolute top performers in their fields of specialization with respect to the whole world. That is, monopoly is expected to take over.

So, what should be a solution to this? We may consider creating our own local communities which are deliberately limited in scope in terms of the way in which they exchange resources, thereby effectively generating "isolated bubbles" which operate in a manner that is similar to those of small medieval kingdoms. However, such a plan is more or less just arbitrary, as it is quite evident that the only method through which a deliberately self-isolating community can promote itself is to appeal to people who want to reinforce their egos by distancing themselves from the rest of the world, as well as to convince them that they ought to choose the particular communities that we are promoting instead of their own.

In order to resolve these tricky issues, we ought to investigate the root of the problem we are facing by means of an example. Let's imagine that you are an artist whose job is to draw concept arts for a living.

(1) Uniqueness

You are an artist who wants to be as unique as possible, since it is the way to ensure that you stay as a demanded individual in the job market. And in order to fulfill this necessity, you constantly try to endow yourself with creative endeavors, for the hope of proving to the rest of the world that you are somebody special - somebody who owns a secret cabinet of sparkling ideas which distinguish themselves from all the rest which are supposedly "boring and less creative". You hate cliché, and assume that anyone who is highly skilled in reproducing the most commercially viable piece of mainstream art are imposters hiding behind an illusion of creativity, as opposed to your "real creativity".

The problem is that, from a purely economic point of view, those who produce cliché are probably the most fitting individuals when it comes to the dynamics of supply and demand (due to the way in which the world of businesses governs itself). Yet it is also true that, if every artist aspires to seek the most optimal method of generating revenue, arts will be dominated by mediocrity.

But sure, there is the world of pure arts which distinguishes itself from the so-called "commercial arts". There are people who are determined to establish and insist upon their own non-mainstream definitions of "creativity", regardless of how the world of business views them. Most of them are hungry artists who hardly manage to make money off of their arts, but a few of them somehow succeed in promoting their own abstract values and achieving some kind of commercial success out of them (possibly with the help of famous acquaintances, bored investors, enormous marketing budget, etc). Even this abstract form of success, however, depends on its own subtle formula which is more or less cliché in terms of being optimized to appeal to a specific class of people in the most efficient way (That is, a class of people who think they are different from others and thus feel the necessity to physically differentiate themselves by buying luxury goods and labelling themselves with fancy keywords).

Therefore, whether it is even possible to become a "unique and creative" individual in today's world which comprises billions of people, the vast majority of whom are able to instantly share their products of ingenuity via a single digital marketplace by means of the internet and social media, is highly questionable.

(2) Practicality

Even if you somehow manage to become a truly unique artist, the problem of commercial viability will forever haunt you. The market does not necessarily reward all types of uniqueness; it only rewards those of specific kinds which are deemed optimal for attracting either a wide range of audiences, or at least a niche audience in a sufficiently competitive fashion (Also, you've got to make them pay). In order to satisfy all these criteria, you must sacrifice part of your uniqueness. This more or less leads to the eventual convergence of creative strategies when it comes to practical business applications.

Yet, some people may persistently exclaim that it is possible to be "creative" while also being pragmatic - perhaps not easy, but not impossible either. And yes, finding a nice little intersection between these two domains of reasoning is something worth a shot, up until the point at which one realizes that there are millions of other people who are thinking in the same exactly way.

The root of the problem lies on the fact that one is trying to do something that others are not doing. Finding such a thing is more or less an illusion in most cases (unless one has recently discovered a brand new field of intellectual endeavors), especially in saturated areas of the industry such as fine arts, music, fiction writing, and game development.

(Corollary)

So, what should be a solution to all this? Will there ever be a way out of this airtight chamber of hopelessness, despite the impression that further competition will hardly be of any use for an ambitious individual except for the purpose of barely keeping up with the status quo?

First of all, when we say that something is "unique", we are essentially saying that it is unique within the context of the whole world. Also when we say that something is "practical", what we are basically saying is that it is practical within the context of the whole world. It all depends on the context, and every qualitative aspect of things is defined in relation to a particular frame of reference rather than being absolutely evaluable on its own.

With this in mind, one can suppose that a fictional context in which a fairly small group of people implicitly agree with one another to share a set of imaginary narratives (i.e. ones which do not pertain to the society's usual "supply and demand" logic) has the potential to revive a tiny isolated community in which the members are endowed with much higher opportunities of becoming unique/useful individuals - that is, a fictional world with its own library of knowledge, its own definition of what is practical or impractical, and so forth.

Such a fictional world will work as a splitting force which draws boundaries upon the surface of our world and lets each of the resulting imaginary regions obtain the privilege to possess its own incontaminable hue. This will prevent the entire universe from plunging into a single point of convergence in terms of innovation, capital, and other characteristics of success, by diversifying the value system in subtle ways.

The problem of how to create an imaginary context, though, is another major challenge to overcome. A fully out-of-reality fiction, such as a fantasy novel, does indeed possess its own artistic value which may even manifest signs of commercial success, yet it is not likely to be taken seriously because it does not pertain to the necessities of our daily life. So what we really need in order to be able to serve the aforementioned purpose is to figure out how to invent a fictional worldview which is only partially detached from reality - that is, a set of narratives that are quite abstract and therefore differentiate themselves from what we directly experience on a daily basis, yet are not so absurd as to let ourselves instantly tell that they are part of an elaborate fiction.

One may say that this mode of reasoning can be interpreted as more or less a "religion", yet my personal persumption is that I should avoid attaching myself to such a fixed vocabulary to describe the concept because such a concise means of explanation is likely to summon a great deal of prejudice and minunderstanding.








:d:An article about indie game prototyping.
:k:Indie, Game, Prototype, Bertrand, Russell, Analysis, Mind, Empiricist, Idealist

[Elements of an Indie Game] 2023.05

When designing an indie game as a solo developer or a member of an extremely small team (e.g. only 2 or 3 people), one often faces a major dilemma which can be described as a chicken-or-the-egg problem. It is a tricky riddle to solve, perhaps trickier than most of the technical problems we encounter every day due to the multidisciplinary nature of game development.

The dilemma begins like this:

Supposed that you are a solo game developer who is trying to design and implement an entire game from scratch. There are typically two approaches you can take to pursue this mission, which I will show below.

(Method 1): Start with the mechanics

You may choose to start your game development journey by first constructing the game's mechanics in order to come up with a solid prototype (i.e. a proof that your game has a potential to succeed). This solution is engineer-friendly, as it allows you to build the skeleton of the game in a highly system-oriented manner.

<005_67>

Everything that the player will ever experience can be described as a network of systems, and each system is nothing more than a set of strictly mathematical relations between its inputs and outputs.

<005_68>

It is oftentimes convenient to design systems as tangible objects. For example, a button is a system because it emits a signal whenever somebody presses it. That is, the act of pressing the button is the system's input and the ensuing signal is the system's output.

In this manner, you may devise quite a multitude of systems which are represented by various interactable objects such as "door", "switch", "light", "platform", "cable", "elevator", "sensor", and so on. Once you fully specify their causal relations, it will be easy for you to join them together to give birth to all sorts of interesting emergent phenomena.

<005_69>

However, this approach soon falls short unless all you want to do is create a purely mechanical sandbox, since a mere assembly of such systems does not necessarily motivate the player to engage him/herself in the game. It is definitely possible to alleviate this problem by simply trying out a huge number of random mixtures among the elements you have made and then cherry-picking only the ones that are sufficiently entertaining, yet this is more or less just a bandage fix rather than a real solution.

It is also possible to attempt to prevent the limitations of your purely mechanical design by introducing systems that are intrinsically motivating. For instance, an enemy character is a system which automatically encourages the player to take a certain set of actions, regardless of where it is placed within the vast network of systems. This will ensure that the player will at least be driven to fight off the enemies no matter how the whole level is designed. Even this kind of solution, however, is not so sustainable because its long-term usage introduces too much repetition to one's gameplay experience and makes the player get tired too easily.

(Method 2): Start with the narratives

Alternatively, you may also begin your journey by constructing the narratives of the game first. Worldbuilding, storytelling, and kindred other means of structuring the game's narrative space are part of this methodology. Unlike the previous method which focused on the dynamics of systems and their causal dependencies, this alternate approach focuses on the set of purposes (volitional elements) and how they are related to one another.

Since everything in the game can be fictional, it is okay for a person to start by simply conceiving an empty world and populating it with a variety of elements such as characters, items, places, and so forth. One can then establish relationships among these elements based upon their inherent characteristics, and proceed to plot their ensuing actions on a timeline in order to formulate a story out of them.

This kind of imaginative endeavor lets the designer keep expanding the game's semantic context, not based on the mechanical aspects of gameplay but rather on its causal fabric of meaning.

Once you come up with characters and their own mental traits such as habits, beliefs, and desires, you will be able to tell what the reactions of these characters are likely to be when they are put under specific scenarios. With this in mind, you will be able to interpolate most of the details of your fictional world by means of induction.

This narrative-driven method, however, reveals its own limitations when it comes to actually implementing the game. A story, for instance, does not automatically fit the interactive nature of gameplay and therefore must be somehow "translated" into a form which makes sense to most gamers. Simply developing a highly story-driven game which forces the player to go through a strictly linear sequence of missions is one valid option to mitigate this, yet such a game is hardly replayable after its initial playthrough unless the gamer is a fan of speedrunning competition.

Unless the story itself is incredibly compelling, therefore, it is usually wise for one to make sure that the underlying narratives of the game world are somewhat compatible with the nonlinear dynamics of gameplay. And this becomes hardly achievable when the designer fails to keep gameplay mechanics in mind when devising the structure of the fictional world and its storyline.

(Problem): Lack of harmony between mechanics and narratives

A major takeaway from the aforementioned two methodologies is that both of them are prone to cause a great split between the two pillars of game development - mechanics and narratives. If we start constructing the game out of the former, we will have a hard time formulating the latter which fits the former. And if we start constructing the game out of the latter, we will have a hard time formulating the former which fits the latter. Our line of reasoning then leads to the third way which is shown below.

(Solution): Start with "mechanical narratives"

If we suppose that a game is made out of basic building blocks, the conclusion we are likely to reach is that such fundamental units of assembly ought to be imbued with the properties of both mechanics and narratives for the sake of integrating both of them into the heart of the game. Otherwise, we will either have to figure out how to define each narrative in terms of a composition of mechanics, or how to define each mechanic in terms of a composition of narratives.

Such multidisciplinary building blocks could be referred to as "mechanical narratives", as they are both mechanical and narrative in nature.

The real challenge of doing this lies on the process of coming up with such intricate fragments of meaning. And my intuition leads me to postulate that the best way to discover them is to identify the most atomic (i.e. indivisible) constituents of the science of life which resides somewhere between the study of biology and the study of psychology.

The reason behind this is that, once a person understands the nature of life, he/she will be able to control the behavior of whichever lifeform the game happens to interact with (aka "player"). This notion applies not only to games, but also other types of media such as books, movies, songs, electronic gadgets, home appliances, and the like.

A major problem we are facing here, though, is that life is such an inexplicably complex phenomenon that we find it nearly impossible to fully depict it in terms of theoreical elements. The thing is, however, that we do not really have to.

The RGB (Red-Green-Blue) color format does not cover the entire spectrum of colors which are recognizable by the human eye, yet it is being used universally as the basis of colors due to the fact that its coverage is satisfactorily broad. Likewise, we do not have to define every single nitpicky detail of life in order to establish a theoretical model of it in a manner that is as sufficiently general as to be considered "universal".

Let us try not to plunge into the endless rabbit hole of rigorous academic studies, and simply focus on the basics of what qualifies a physical object as a "living thing". Here is the question - Why on earth do we say that some objects are animate, while others are inanimate?

First of all, presence of causal relations among physical events does not necessarily distinguish animate objects from those which are inanimate because every physical entity possesses its own rules of interaction with respect to the rest of the world. When a box drops on top of a spring, the spring pushes it upwards to maintain its equilibrium. And when a ball drops on top of a ramp, the ramp lets the ball roll down its angled surface. These are all causal relations.

One might fancy that lifeforms can be distinguished from inanimate objects due to their possession of mental traits such as beliefs, desires, and emotions, yet the legitimacy of this argument is highly questionable.

For example, one can imagine that a mechanical spring "believes" that it must always endeavor to preserve its state of equilibrium (i.e. not being too compressed or too stretched), and that it "desires" to fulfill such a belief by means of an opposing force whenever an external event causes it to be either compressed or stretched. How can we tell for sure that a human being is something more than just an extremely sophisticated spring, despite the notion that one's mind may ultimately be able to be interpreted as a list of purely mechanical relations?