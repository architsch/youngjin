:d:How to design and implement the most perfect sandwich we can ever imagine? This is a quick introduction to the study of Sandwich Engineering.
:k:Sandwich Engineering, Innovation, Technology, IT, Logic, Industrial Engineering, Culinary Arts, Food Science, Set Theory, Engineering Math
:l:2025-01-17

[Sandwich Engineering - Chapter 1] January 17, 2025

@@<hr>
@@<h3><b>Introduction</b></h3>

<001>

Sandwich Engineering is one of the hottest research topics in today's world. Every tech influencer on social media has been talking about it, and it is now an indisputable fact that if you do not learn how to make a sandwich, your job will soon be replaced by the world's most professional sandwich makers.

So, stay tuned and do not miss out this great opportunity. The future belongs to those who know how to leverage the full power of sandwiches; they are the ones who will dominate the tech industry within the next couple of years. Sandwich engineering is the future, and those who recognize its potential are the ones who will lead this new era of groundbreaking innovation.

This series will present you with an overview of this brand new field of study called "Sandwich Engineering", and how it is going to revolutionize the industry, offer cutting-edge solutions to startups, help passionate individuals succeed, achieve world peace, save our planet, make everything diverse, fulfilling, mindful, sustainable, and... whatever.

@@<hr>
@@<h3><b>Means of Combination</b></h3>

In order to understand the basics of sandwich engineering, one must first learn how a sandwich should be defined. A sandwich is the result of combining the following sequence of things and stacking them together:

#$
(1) A piece of bread, and
(2) Something which goes inside the sandwich, and
(3) Another piece of bread.
#$

Graphically speaking, this kind of composition can be depicted in the form of the diagram shown below.

<002>

What this image tells us is pretty straightforward. First of all, it asks the question, "What is a sandwich?" Then, it proceeds to claim (with the help of an arrow) that a sandwich is the result of combining a piece of bread (i.e. "Bread"), something which goes in between (i.e. "..."), and another piece of bread (i.e. "Bread").

In other words, the diagram states that we can make a sandwich by putting a bread AND something else AND another bread together in the same place. This process of combining multiple things into a single composite object (in this case, a sandwich) can be achieved by joining these three ingredients with the word "AND".

One should also be able to define a more specific type of sandwich. For example, a "ham sandwich" is a sandwich in which the middle ingredient is known to be a slice of ham.

<003>

What about a broader type of sandwich, such as "meat sandwich"? Its definition is not as specific as that of a ham sandwich because we are not exactly sure what sort of meat will be placed inside of it. In case of ambiguity like this, though, we are free to specify the ingredient as a list of options. Such a list can be denoted by the word "OR".

<004>

Here, we have two major constructs in our grammar - "AND" and "OR". Whenever we put multiple things together and let them coexist, we use the word "AND". Whenever we put only one among the multitude of things available, we use the word "OR".

@@<hr>
@@<h3><b>Means of Abstraction</b></h3>

The problem with the above illustration, though, is that it is now starting to look a bit messy. It contains far too many arrows and words, and thus it is quite difficult for us to grasp what is going on in the picture. Therefore, it is important for us to split each part of the sandwich and turn it into its own encapsulated definition. This is our first step toward abstraction.

Let us revisit the definition of "meat sandwich". Instead of listing all the alternatives when describing the "meat" ingredient (such as ham, bacon, etc), we may as well simply put the word "meat" in the place where the chosen piece of meat will be inserted.

<005>

If anyone asks what the word "meat" is supposed to represent, we will then present him with the full definition of the word "meat", which is shown below.

<006>

The key point here is that we are deferring our explanation of the word "meat" up until the moment at which it is being asked.

In the same vein, one may also treat the word "bread" as an abstract concept by endowing it with an encapsulated definition. For instance, one could define "bread" as a selection of one of the following choices: "bun", "toast", "biscuit", or "English muffin". This makes sense because every one of them can be classified as "bread".

<007>

If you fully expand our definition of "meat sandwich" by replacing all of its abstract components with their full definitions, then, you will see something like this:

<008>

As you can tell, this diagram looks a bit too bloated. It contains too many details, so it is neither easy to draw nor easy to read. This is why we ought to abstract out some of its parts to keep things simple.

Abstraction can be done on multiple levels as well. For example, nothing prevents us from turning "sausage" into its own abstract definition, such as the one displayed below.

<009>

This will let us replace the "sausage" part of the definition of meat with the listing of different types of sausages.

<010>

... which, in turn, will imply that the full definition of "meat sandwich" should look something like this:

<011>

Here, "meat" is the abstraction of what goes inside a meat sandwich (in general), and "sausage" is the abstraction of what goes inside a meat sandwich as soon as we decided to put a sausage in it. These are two different levels of abstraction, and they unwrap themselves one by one, as we specify our choices of ingredients.

@@<hr>
@@<h3><b>Extreme Forms of Abstraction</b></h3>

As we keep stretching this kind of reasoning, we will eventually find ourselves reaching the most extreme edge cases in which the idea of infinity is involved. There are two of them - one which represents the concept of "anything", and the other one which represents the concept of "everything".

<012>

Whenever someone says "anything", he is referring to any one of the infinitely many things we can ever imagine. This is the equivalent of the "OR" relation among the infinity of things.

Whenever someone says "everything", he is referring to every one of the infinitely many things we can ever imagine. This is the equivalent of the "AND" relation among the infinity of things.

With these two ends of the spectrum in mind, we should be able to imagine a "sandwich" as an object which comprises two pieces of bread and "anything" between them.

<013>

And of course, this "anything" is an abstract entity which defines itself as an arbitrary choice among infinitely many options.

<014>

A sandwich is a sandwich as long as there is anything between two pieces of bread, and we do not care what it is; it could be a piece of meat, vegetable, mashed potato, glass, metal, antimatter, black hole, or whatever. There are infinitely many choices available, which makes "anything" the most general form of existence we are ever able to define.

@@<hr>
@@<h3><b>Taxonomy of Sandwiches</b></h3>

What we can learn from the above example is the fact that abstraction comes in different degrees of generalization. Some forms of abstraction are either more general or more concrete than others.

For example, "sandwich" is the most general kind of all sandwiches because its definition allows us to choose absolutely anything for its core ingredient. In other words, it covers the widest range of choices we can ever imagine.

"Meat sandwich", on the other hand, is less general than "sandwich" because the range of choices of its core ingredient is more restricted. Instead of just "anything", we are forced to choose something which is able to be classified as "meat".

"Ham sandwich" is even less general than "meat sandwich" because its range of choices is way more restricted. Instead of enjoying the freedom of choosing any type of meat, we are forced to choose a slice of ham as its core ingredient.

<015>

In the context of set theory, we should be able to arrange the aforementioned three categories of sandwich as a sequence of subset relations. Here, "meat sandwich" is a subset of "sandwich" because the former is more specific than the latter, and "ham sandwich" is a subset of "meat sandwich" because the former is more specific than the latter.

<016>

Each of these subset relations, in a way, can be considered a categorical branch in the taxonomy of sandwiches.

From a graphical point of view, it should be fairly straightforward to construct the family tree of sandwiches in terms of such branches.

<017>

As you get closer to the tree's root, you will encounter more and more general categories of sandwich. As you get closer to the tree's individual leaves, you will encounter more and more specific categories of sandwich.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-2.html"%}Chapter 2{%/a%})







:d:The future of tech innovation belongs to sandwiches. This article introduces you to Sandwich Engineering - the study of the world's most underrated next-gen technology which will redefine the way we live!
:k:Sandwich Engineering, Innovation, Creative Technology, Tech Startup, Business Solution, Food Tech, New Technology
:l:2025-01-19

[Sandwich Engineering - Chapter 2] January 19, 2025

@@<hr>
@@<h3><b>Composition</b></h3>

What makes a good sandwich?

This is perhaps one of the most important questions which have ever been asked in the field of culinary arts. Even the most experienced gastronomers, who have spent their entire lifetime exploring the nature of sandwiches in their extraterrestrial kitchens, struggle to answer it with a sufficient degree of confidence.

No one, however, would deny that composition plays a central role in the making of a high-quality sandwich.

A sandwich comes into existence the very moment we compose its ingredients in the form of a stack. We pile a number of things from bottom to top, and if the order and types of these things are appropriate, we will be able to define the resulting stack as a "sandwich".

<001>

And the secret of designing a great sandwich belongs to the way in which the individual elements of the stack are being chosen.

@@<hr>
@@<h3><b>Composition from a Taxonomical Viewpoint</b></h3>

In order to understand what are good sandwiches (as opposed to bad sandwiches), we must first clarify the ways in which they can be categorized. As you have seen in the last article, a taxonomy (i.e. family tree) of sandwiches comes in handy whenever we are attempting to classify them in a hierarchical order.

In many cases, however, a strictly hierarchical (i.e. tree-based) organization of categories does not really work. And the reason behind this is that it is perfectly feasible to contrive a sandwich by "mixing" different types of sandwiches.

Let me show you an example. The image below is the definition of a ham sandwich.

<003>

Similarly, the image below is the definition of a cheese sandwich.

<018>

Here is where things start to get interesting. What if I want to put both a slice of ham AND a slice of cheese together, and make a sandwich out of them? In that case, we will have to refer to it as a "ham & cheese sandwich". Its definition is shown below.

<019>

This graph is self-explanatory, isn't it? It is called a "ham & cheese sandwich" because it contains both ham and cheese in it.

Here is a problem, though. At which point in the hierarchy should I place this sandwich? Will it be within a subcategory of ham sandwiches (because it is a more specific variant of a ham sandwich), or will it be within a subcategory of cheese sandwiches (because it is a more specific variant of a cheese sandwich)?

Let us revisit the family tree of sandwiches to find the answer. The diagram below shows the taxonomical relationships among different types of sandwiches.

<020>

What is illustrated here is pretty straightforward. "Meat sandwich" is a subset of "sandwich" because the former is more specific than the latter, and "ham sandwich" is a subset of "meat sandwich" because the former is more specific than the latter, and so forth.

<021>

What about "ham & cheese sandwich"? First of all, let me just ask a couple of questions.

Is "ham & cheese sandwich" also a "ham sandwich"? Oh, yes. Absolutely! It has ham in it, so it is a ham sandwich. Just because it has cheese in it does not make it a non-ham sandwich. Therefore, "ham & cheese sandwich" is a subset of "ham sandwich".

Here is another question. Is "ham & cheese sandwich" also a "cheese sandwich"? Yes! It has cheese in it, so it is a cheese sandwich. Just because it has ham in it does not make it a non-cheese sandwich. Therefore, "ham & cheese sandwich" is a subset of "cheese sandwich" as well.

<022>

So, there we have it. The graph can no longer be called a "family tree" (because it is not a tree anymore), and it is no longer purely hierarchical. Nevertheless, we are able to tell that this sort of representation does accurately reflect the nature of mix-and-match among different sandwich types.

<023>

From a set theory point of view, one can say that "ham & cheese sandwich" belongs to the intersection between "ham sandwich" and "cheese sandwich". The reason is that it is both a ham sandwich AND a cheese sandwich at the same time.

Here is a slightly different way of looking at the same subject. A "ham sandwich" only has ham in it, and a "cheese sandwich" only has cheese in it. If you put these two ingredients together inside the same sandwich (by putting them under the same "AND" relation), you will get a "ham & cheese sandwich".

<024>

The pattern we are seeing here curiously resembles the "OR" pattern we saw in the last article. Previously, I have demonstrated that the more choices of ingredient a sandwich has, the more general (i.e. broader) it gets when it comes to categorizing it in a hierarchy.

<025>

The "AND" equivalent of this phenomenon can be depicted in a similar fashion. Here, combining more and more ingredients in one place will put the sandwich into a denser and denser intersection of sandwich types.

<026>

@@<hr>
@@<h3><b>Sandwich Abstraction Layers</b></h3>

The mix-and-match sort of combination can happen across multiple layers of abstraction as well. For example, nothing prohibits us from stacking "any type of meat" upon a slice of ham, putting this semi-generic pair of ingredients between a pair of bread pieces, and referring to the whole thing as a "ham & meat sandwich".

<027>

This, of course, contains its own expandable bundle of details because the word "meat" suggests a multitude of choices.

<028>

What is interesting is that we are able to compose things that are already results of their own compositions.

Suppose that I decided to put the ingredients of a "ham & cheese sandwich" on top of the ingredients of a "ham & meat sandwich". The resulting product, then, will be called a "ham & meat & ham & cheese sandwich" (or "HMHC sandwich" for short).

<029>

If we graphically depict the hierarchical relationships among the sandwich types introduced so far, we will obtain a diagram which looks like this:

<030>

Notice that the "hierarchy" of sandwiches is no longer a tree; it is more of a generic graph, whose branches not only diverge but also converge.

What you are seeing is an example of the so-called "abstraction layers", where upper layers contain relatively generic sandwiches and lower layers contain relatively specific sandwiches.

<031>

Each layer is connected to its neighboring layers by means of either divergence (i.e. choice of ingredients) or convergence (i.e. composition of ingredients), or both.

As a result, what we are seeing is a vast, intertwined fabric of sandwiches. Some of them are often preferred over others, depending on how harmonious their ingredients are.

For example, it is not hard to expect that a "bacon cheese sandwich" is much more appetizing than, say, a "steamed beans and mashed potato sandwich".

@@<hr>
@@<h3><b>Edges of the Fabric</b></h3>

There are edge cases beyond which the fabric is no longer capable of extending itself, though.

Remember that, in the last article, I mentioned that there are two extreme scenarios called "anything" and "everything", in which the former represents the infinite choice of ingredients, while the latter represents the coexistence of every ingredient?

<012>

These two extreme cases can be thought of as the topmost and bottommost tips of the fabric, respectively.

At the topmost is the so-called "sandwich", which is just a shorthand for "anything sandwich". At the bottommost is the "everything sandwich", which is a sandwich containing the entire universe as its core ingredient.

<032>

The "anything sandwich" is the ancestor of all sandwiches; it is the ultimate birthplace in which literally anything may potentially fill up the space between the two pieces of bread. The "everything sandwich", on the other hand, is the composition of all types of sandwiches we can ever imagine.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-3.html"%}Chapter 3{%/a%})









:d:Sandwich Engineering will be the ultimate game-changer in this new era of tech innovation. In this article, we will introduce you to the semantics of a gourmet sandwich and how its method of taste analytics will revolutionize the way we provide our shareholders with cutting-edge enterprise solutions!
:k:Engineering, Innovation, Technology, Startup, Information Technology, IT, Enterprise Solutions, Industrial Engineering, Information Systems, Semantics, Expert Systems
:l:2025-01-23

[Sandwich Engineering - Chapter 3] January 23, 2025

@@<hr>
@@<h3><b>Evaluation of a Sandwich</b></h3>

How to measure the quality of a sandwich?

It really depends on one's personal taste, but we can still talk about some of the commonly available methodologies. Being able to evaluate the overall quality of a sandwich is a necessary skill to have, in order to become a legendary sandwich craftsman.

<033>

A truly appetizing sandwich must obey the following two principles:

#$
(1) It consists of tasty ingredients.
(2) These ingredients are stacked in a tasty order.
#$

The word "tasty" may sound a bit too subjective, and indeed it is. However, it will appear to be far more sensible if you just interpret it as "generally tasty" or, in other words, "considered tasty by the average eater".

@@<hr>
@@<h3><b>Taste Scores</b></h3>

Let us begin with the first principle.

The first step toward the making of a highly edible sandwich is to gather ingredients which can be appreciated even when we eat each of them individually. This means that it is crucial for us to first evaluate the quality of each ingredient and assign a number to it (denoting its degree of tastiness). We may refer to this number as the ingredient's "taste score".

<034>

Since a sandwich is a combination of multiple ingredients, a straightforward way of judging its quality is to first evaluate the scores of its individual components and then sum them all up.

Let me start with a simple example. The following image is the anatomy of a cheese sandwich which was showcased before.

<018>

How to calculate its overall score? Oh, it may seem daunting at first, but the problem is not complicated at all as long as you put some thought to it. Let us first assign the appropriate score to each of the sandwich's ingredients, and then take the sum of them (denoted by the "+" sign).

<035>

The result of such computation could be used to represent the overall taste score of the cheese sandwich. Why? Because a cheese sandwich is basically just the "sum" of its three constituents - lower bread, cheese, and upper bread. If we know their individual scores, therefore, it should make sense to assume that the score of the whole sandwich is their sum.

<036>

Assuming that the score of each piece of bread is 7 and the score of each slice of cheese is 10, we may conclude that the score of the cheese sandwich is 7 + 10 + 7 = 24.

<037>

All right, here is the next example. How shall we compute the taste score of a sausage sandwich?

<038>

Here, we will assume that the sausage is an abstract item; that is, the word "sausage" is simply a generic term which is being used to indicate one of the 3 possible choices - chicken sausage, pork sausage, and beef sausage.

<039>

This means that, in order to figure out the taste score of the "sausage" part of the sandwich, we must first know how to determine the score of something uncertain (i.e. something which comes with multiple choices).

This too, however, is not a headache at all. Assuming that each choice has an equal chance of being picked up, we can claim from a statistical point of view that the most expected score of a randomly selected sausage is simply the average score of its 3 potential choices (i.e. chicken, pork, or beef).

<040>

The term "avg" is just a shorthand for "average", by the way. If we suppose that the scores of the 3 aforementioned types of sausages are 13, 14, and 15, respectively, we will be able to conclude that the overall score of the "sausage" in our context is the average of 13, 14, and 15.

<041>

This score calculation procedure can substitute the "sausage" part of the sausage sandwich, yielding the following arithmetic scheme:

<042>

If we compute the "avg" part, we will get this:

<043>

... which eventually simplifies down to a single number, representing the sausage sandwich's overall score (shown below).

<044>

@@<hr>
@@<h3><b>Pitfalls of Summation</b></h3>

Okay, you might have noticed that there is something fishy in here. It is the fact that, if we are to stick to the above methodology and refuse further elaboration on how scores are to be derived, we will soon be forced to reach the conclusion that a sandwich with more ingredients should score higher than those with fewer ingredients.

This, of course, is not desirable. Unless you are a mere glutton whose only interest is to eat as much as possible, you will agree that packing more ingredients does not necessarily yield a better sandwich.

Let us take a cheese sandwich as an example. We know that it has a single slice of cheese in it, so it makes sense to simply add the score of the cheese to the sandwich's total score.

Since cheese is a highly favored ingredient (because it is tasty), let us add an additional slice of cheese to the sandwich and make it a "double-cheese sandwich".

<045>

If we are to follow the scoring method established so far, we will have to say that adding this additional slice of cheese will basically double the cheese-score of the sandwich. This feels a bit excessive, but, let us move on anyways.

Next, I will try adding yet another slice of cheese to this double-cheese sandwich and turn it into a "triple-cheese sandwich". What will the new score be?

<046>

Of course, it will be even higher than that of the double-cheese sandwich, simply because there are more slices of cheese in this case.

The problem with this approach is that it just keeps incrementing the score as we add more and more ingredients.

What if we put 4 slices of cheese instead of 3? What about 5, 6, 7, or even 100 slices of cheese? Should a hundred-cheese sandwich score about 100 times higher than a single-cheese sandwich? Probably not. No one wants to eat a sandwich with a hundred slices of cheese in it.

Therefore, a mere summation of the individual ingredient scores does not accurately reflect the sandwich's overall score.

@@<hr>
@@<h3><b>Relational Taste Scores</b></h3>

So, what's the solution? First off, we definitely need a better way to tell how good a sandwich is. Let us revisit the previous cheese sandwich example.

<018>

Just by looking at the ingredients, I am able to tell that it should score pretty high because it has cheese in it, yet not "too" high because it has cheese only and nothing else. A slice of ham would have made it a lot more appetizing.

But the question is, will this sandwich become more appetizing if I add a totally random thing as an extra ingredient, such as apple jam?

<047>

In my opinion, both a "cheese sandwich" and an "apple jam sandwich" deserve high scores, while a sandwich which contains both cheese AND apple jam in it does not.

The reason behind this is that cheese and apple jam usually do not pair up well. Some people might find it particularly attractive, but I do not believe that such appetite is commonplace (Consider "mint chocolate" as an example).

The main problem here is that when two things are combined, their values do not necessarily add up. Depending on how harmonious they are when put together, they may introduce either synergy or dissonance.

Take a look at the following example here, which shows the anatomy of a PB&J (Peanut Butter & Jelly) sandwich.

<048>

Compare this with the "cheese & apple jam sandwich" we saw before. If you are equipped with a decent sense of taste, you should probably agree that the PB&J sandwich deserves a much higher score than the other one. Peanut butter and jelly is a way better choice of combination than the one between cheese and apple jam.

This sort of reasoning leads us to the conclusion that, when evaluating a sandwich, we must take into account not only the scores of the individual ingredients, but also the scores of their relations.

Here is an alternative scoring method.

<049>

As you can tell from the pictures above, I am now assigning scores to pairs of neighboring items, not the items themselves (Notice that the pairing of peanut butter and jelly produces a higher score than that of cheese and apple jam). Then, I am simply taking their average to obtain the overall score of the sandwich.

This, too, has its own flaws. For instance, it does not consider cases in which we are duplicating the same thing a bunch of times (e.g. 100 cheese slices).

Nevertheless, what is shown above is an improvement over the previous methodology, and we are free to keep rectifying it. For now, though, I will pause here and move on to other important topics.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-4.html"%}Chapter 4{%/a%})








:d:Within a few years, Sandwich Engineering will become the next powerhouse of technological innovation. Learn how to make a sandwich now, or you will miss this great opportunity to change the world through creativity and collaboration!
:k:Data Science, Computational Logic, Innovation, Tech Startup, Information Systems, Computer Science, Computer Engineering, IT, Industrial Engineering, Systems Engineering, Signal Processing, Technical Design, Product Design
:l:2025-01-26

[Sandwich Engineering - Chapter 4] January 26, 2025

@@<hr>
@@<h3><b>Manufacturing of a Sandwich</b></h3>

<050>

So far, I have only been explaining what a sandwich "is", not how it can be produced.

"How to make a sandwich?" is an indispensable question, and we must be able to answer it in order to be able to enjoy a sandwich as our lunch menu.

@@<hr>
@@<h3><b>Sandwich Transformation</b></h3>

If we want to understand the way in which a sandwich is being made, we should first learn how one type of sandwich can be transformed into another. Let us revisit our cheese sandwich example to see what I mean by this.

<018>

As you can tell from the picture above, a cheese sandwich is the result of making a stack out of a piece of bread, a slice of cheese, and another piece of bread. Suppose that we have made this sandwich already. In which ways will we be able to modify it?

Here is a simple example. Let us take off the top piece of bread. This will change this "cheese sandwich" into a "cheese open sandwich".

<051>

It can no longer be just called "sandwich"; instead, it is now required to be called an "open sandwich" because its upper portion is not being closed by a piece of bread.

This is an example of a transformation. Removing the topmost item from the stack turned our cheese sandwich into a "cheese open sandwich". Such a process can be expressed as an arrow (see the diagram below).

<052>

The opposite scenario is equally feasible. We can add back the piece of bread to the top of the "cheese open sandwich", thereby recovering our original cheese sandwich.

<053>

Here is another example. What if we wish to convert our cheese sandwich into a "double-cheese sandwich" instead, by putting an extra slice of cheese in it?

<054>

This one is a bit tricky. Previously, we were simply dealing with the uppermost part of the sandwich, so every related action could take place immediately. In contrast, we cannot convert our cheese sandwich into a "double-cheese sandwcih" just by fiddling with its topmost ingredient. The following image shows what needs to be achieved.

<055>

We are trying to put a slice of cheese in between the existing cheese and the bread which sits on top of it. Can we do this by removing the top bread? No, because it will merely turn the sandwich into an open sandwich. What about stacking cheese on top of the sandwich? No, because it will make the top bread be "stuck" between the two slices of cheese.

The solution must be pretty simple as long as we think of it as a multi-step procedure. First, we just take out the top bread to expose the cheese. Next, we add an extra slice of cheese on top of the existing cheese. Finally, we put back the top piece of bread.

<056>

These three steps, when executed in the right order, will transform the cheese sandwich into a "double-cheese sandwich".

The diagram below is a more comprehensive illustration of what can happen between a "cheese sandwich" and a "double-cheese sandwich". Note that there are two intermediate states between the former and the latter.

<057>

@@<hr>
@@<h3><b>Reversible VS Irreversible</b></h3>

There are processes, however, which cannot be reverted. Imagine that we are trying to turn a cheese sandwich into a "cheese & hot sauce sandwich" - that is, a sandwich made up of a slice of cheese and a bit of hot sauce spread upon it. The following image shows the steps required to carry out this job.

<058>

It is almost identical to the list of steps we saw before. The only difference is that, instead of putting an extra slice of cheese, we just put some hot sauce in it.

But be careful! The process of putting hot sauce is irreversible because it is in a liquid form. Take a look at a more comprehensive diagram which is shown below.

<059>

Here, you can clearly see that there is no arrow which lets you convert the "cheese & hot sauce open sandwich" back to "cheese open sandwich". This implies that once you put hot sauce on your "cheese open sandwich" and turn it into a "cheese & hot sauce open sandwich", you are unable to turn it back to "cheese open sandwich" by simply taking out the hot sauce (because you can't).

This make sense, doesn't it? Hot sauce is made of gooey liquid, so we cannot just grab it and throw it away once it sticks to the surface of the cheese.

In general, we should be able to say that each transformation is either reversible or irreversible.

It is "reversible" when it comes with a pair of arrows (creating a two-way road). In contrast, it is "irreversible" when it comes with only a single arrow (creating a one-way road).

<060>

@@<hr>
@@<h3><b>Building a Sandwich from Scratch</b></h3>

Let us push these minor details aside, and focus on what is of utmost importance - making a sandwich from scratch.

Suppose we are facing an empty table. What do we have to do in order to come up with something which can be referred to as a "sandwich"? One thing that is for sure is that we need to prepare some ingredients, and then stack them one by one.

First of all, we know that the bottommost part of a sandwich is always a piece of bread. So let us start by putting a piece of bread on the table.

<061>

This single piece can technically be called an "empty open sandwich"; it is "open" because its top is not closed by another piece of bread, and it is "empty" because there is nothing above the bottom piece of bread.

If we put another piece of bread on top of it, it will become a (closed) sandwich. Since there will be nothing between the two pieces of bread, however, it will be called an "empty sandwich"; it is no longer "open", but it is still "empty".

<062>

What if we put yet another piece of bread on top of this "empty sandwich"? Oh, in this case, our sandwich will no longer be empty because its inside will be filled with something. This "something", though, is just a piece of bread, so we will have to refer to the whole thing as a "bread sandwich".

<063>

This kind of naming should make sense. When there is ham between two pieces of bread, we call it a "ham sandwich". And when there is cheese between two pieces of bread, we call it a "cheese sandwich". So, if there is bread between two pieces of bread, we ought to call it a "bread sandwich".

The series of stacking processes we have carried out so far can be summarized as the ones shown below.

<064>

First, we started from nothing. We added a piece of bread on top of this "nothing" and turned it into an "empty open sandwich". We then added another piece of bread on top of it to turn it into an "empty sandwich", and then another piece of bread on top of it to turn it into a "bread sandwich".

Note that these 3 processes are all reversible because each of them has its own opposite action which reverts its effect.

@@<hr>
@@<h3><b>Tech Tree of Sandwiches</b></h3>

If we just keep stacking pieces of bread and nothing else, we will eventually end up producing just a bunch of boring sandwiches, such as "double-bread sandwich", "triple-bread sandwich", and so on. We need something other than bread in our sandwich.

Fortunately, there are alternative ways in which a sandwich could be constructed. We've got a plethora of different choices, and bread is just one of them. On top of our first piece of bread, for example, we could have put a slice of cheese instead.

<065>

See? Here are two alternative pathways, and we are free to choose one of them. If we choose to put a piece of bread upon the existing piece of bread, we will end up with an "empty sandwich". If we choose a slice of cheese, on the other hand, we will end up with a "cheese open sandwich".

The following diagram is a more comprehensive depiction of these two choices.

<066>

We can keep expanding this "tech tree" of sandwiches, which contains innumerable choices (branches) from which all sorts of unique sandwich recipes are able to be conceived.

<067>

What you are seeing above is an example of a tree involving multiple variants of "cheese sandwich". It is not hard to imagine that the tree will become more and more diversified as we introduce additional ingredients such as ham, sausage, avocado, potato, etc.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-5.html"%}Chapter 5{%/a%})







:d:Learn how to design and manufacture a perfect sandwich, and you will become an expert Sandwich Engineer! This is the 5th part of the series, "Sandwich Engineering".
:k:Sandwich Engineering, Engineering Math, Computer Science, Signal Processing, Systems Engineering, Manufacturing, Industrial Processes, Symbolic Logic
:l:2025-01-30

[Sandwich Engineering - Chapter 5] January 30, 2025

@@<hr>
@@<h3><b>Sandwich Uncertainty Principle</b></h3>

When building a sandwich from scratch, however, we often face moments of ambiguity which could be a bit annoying. And if you really want to become a master of sandwich engineering, you should understand the nature of such moments as well as how to treat them properly.

<068>

Let me give you an example. In the previous chapter, I have shown you that putting a slice of cheese on top of a single piece of bread will turn it into a "cheese open sandwich".

<069>

There is a great deal of uncertainty going on here, though. What kind of cheese do we refer to exactly, when we say: "cheese open sandwich"? There are different types of cheese, and we will never know which one we are talking about as long as we just say "cheese".

For instance, suppose that there are 3 types of cheese available - Provolone, Gouda, and Cheddar. This will imply that whenever we say the word "cheese", we are indicating one of these 3 types (not all of them, but one).

<070>

This means that we cannot just put "cheese" on top of a piece of bread, without specifying its type. "Cheese" is an abstract concept. It is not a tangible object which we can touch, smell, or eat. Rather, it is a general category of things which can be classified as "cheese".

Thus, whenever we are using the word "cheese", we are merely "deciding" to put a slice of cheese to the sandwich without actually doing it (since we haven't yet determined whether this cheese should refer to Provolone, Gouda, or Cheddar).

<071>

And of course, we are free to cancel our decision if we want to.

<072>

Since "cheese" is an abstract concept, we must be able to tell that a "cheese open sandwich" is an abstract concept, too. So for example, when we say "cheese open sandwich", we know that it must be made of bread and cheese, right?

<073>

But the problem is that the cheese itself is something ambiguous; the word "cheese" alone does not tell us exactly which kind of cheese it is. Thus, the "cheese" part of this sandwich must comprise a number of alternative options (i.e. Provolone, Gouda, or Cheddar).

<074>

This sandwich is abstract (i.e. not tangible) because we have not fully specified its ingredients yet. As long as there is room for ambiguity, it cannot exist in real life.

@@<hr>
@@<h3><b>Schrödinger's Cheese</b></h3>

It is only after we make specific choices to resolve all the ambiguities, that the sandwich will finally become tangible. In the example below, I chose to put a slice of Provolone cheese on top of the bread. This cleared out every bit of indeterminacy from the sandwich and turned it into something solid (i.e. non-abstract).

<075>

We can summarize the steps we have taken so far as a harmony between two types of actions - one for presenting ourselves with a set of choices, and the other one for actually making a choice out of them.

Putting a slice of Provolone cheese on top of the bread, for instance, required me to first "decide" to put a slice of cheese (which gave me access to 3 choices - Provolone, Gouda, and Cheddar), and then pick the choice called "Provolone".

<076>

And of course, these two steps are both reversible, meaning that I am able to remove the cheese from the top and turn the whole thing back to an "empty open sandwich".

<077>

@@<hr>
@@<h3><b>Sandwich Production Line</b></h3>

A sense of confusion may arise here, though. What do we mean when we say that we "decided" to put a slice of cheese?

<071>

Whenever we "decide" to do something, we are not actually doing it. Instead, we are simply making a promise to do it in the future. This is more of a mental phenomenon, rather than something which is physically measurable. However, it is still feasible to express such a sense of promise by physical means.

Imagine that we are operating a "sandwich production line" inside a factory. There is a conveyor belt which carries stacks of sandwich ingredients. By the time they reach the end of the belt, they will transform into fully legitimate sandwiches.

<078>

Oh, but we cannot make stacks of ingredients just by carrying them on a conveyor belt. We need dispensers which will put new ingredients on top of the existing ones. In order to let our sandwiches have cheese in them, for example, we need a cheese dispenser.

<079>

As you can see, this cheese dispenser will be responsible for dropping cheese on top of bare pieces of bread that are passing by, thereby turning them into "cheese open sandwiches".

Let us suppose that a single piece of bread happened to enter the conveyor belt, above which a cheese dispenser is situated. At first, this piece of bread is obviously just an "empty open sandwich" because it is just a single piece of bread.

<080>

The moment it comes right beneath the cheese dispenser, however, it becomes a different story. Here, we know that a slice of cheese is about to be dropped on top of the piece of bread. We are not yet sure exactly what kind of cheese will come out of the dispenser, but we can at least assure that "some" cheese will come out it.

<081>

This is the very moment at which we can sense a "promise" of having a slice of cheese on top of the bread. At this point in time, therefore, this particular piece of bread should be considered a "cheese open sandwich". Although it does not have an actual slice of cheese on it yet, we know that it is about to have one soon.

And as soon as the dispenser drops an actual slice of cheese (such as Provolone), this thing called "cheese open sandwich" will transform into something tangible - that is, something which has real cheese on it (not an abstract kind of cheese).

<082>

We can map this out as a diagram, like the one shown below. A single piece of bread (aka "empty open sandwich") turns into a "cheese open sandwich" as soon as it becomes clear that a slice of cheese is about to drop on top of it, and subsequently turns into a "provolone cheese sandwich" as soon as it receives an actual slice of Provolone cheese.

<083>

And when you look at the conveyor belt as a whole, you will realize that the queue of sandwiches which continuously flow from the left to the right are undergoing a series of transformations one by one, depending on whether each of them is coming toward the cheese dispenser, going away from the cheese dispenser, or is passing right underneath it.

<084>

In a way, therefore, a conveyor belt can be thought of as a "sandwich transformer". It absorbs an incoming stream of sandwiches, transforms them one by one, and pours them out as an outgoing stream of sandwiches.

<085>

We can keep expanding this idea indefinitely. By adding yet another cheese dispenser to the belt, for example, we are able to manufacture not just single-cheese open sandwiches, but also double-cheese open sandwiches (see the image below).

<086>

What's next? Oh well, it is not so hard to imagine the sheer variety of opportunities waiting before us. We may as well introduce a "bread dispenser" and "ham dispenser" to produce "ham sandwiches", or a "bacon dispenser" to produce "bacon sandwiches", and so on.

The horizon of possibilities is endless.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-6.html"%}Chapter 6{%/a%})









:d:Sandwich Engineering will change the world via its innovation and technical excellence! In this article, you will learn how to optimize your sandwich's gastronomic user experience and figure out the most efficient way of reproducing it.
:k:Sandwich Engineering, Logic System, Expert Systems, Artificial Intelligence, Industrial Engineering, IT, Innovation, Creativity, Manufacturing, Systems Thinking, System Dynamics, Scientific Computing, Applied Math
:l:2025-02-04

[Sandwich Engineering - Chapter 6] February 4, 2025

@@<hr>
@@<h3><b>Multiple Pathways</b></h3>

Suppose that we are running a sandwich factory. We are trying to manufacture sandwiches here.

Let's begin with a bread dispenser (shown in the image below). This is the very first step in the making of a sandwich. Every sandwich starts with a piece of bread.

<087>

All right. What shall we do, if we want to make a cheese sandwich?

Since a cheese sandwich is just a stack of a piece of bread, a slice of cheese, and another piece of bread, it is not so hard to imagine that lining up 3 dispensers (i.e. a bread dispenser, a cheese dispenser, and another bread dispenser) will let our conveyor belt pour out cheese sandwiches.

<088>

So far, so good. But here is the thing. What if we want to generate more than just a single type of sandwiches? Imagine that our factory is required to produce not just cheese sandwiches, but also ham sandwiches. What shall we do?

The answer is, we need to "branch out" our production line into multiple pathways. What I mean by this is that we need separate conveyor belts to be able to make different types of sandwiches.

For now, let us assume that there are two belts - one for putting slices of cheese for cheese sandwiches, and another one for putting slices of ham for ham sandwiches.

<089>

This is not the end of the story, though. Note that both of these belts are receiving bottom pieces of bread, upon which either cheese or ham could be placed. Where do these pieces of bread come from?

For sure, it is technically possible to supply bread by equipping both of these conveyor belts with their own bread dispensers.

<090>

This is a bit too wasteful from an economic point of view, however. Each machine comes with its own price (for purchase and maintenance). Also, more machines means more chance of failure in the manufacturing process. So we ought to keep the number of machines as low as possible.

The solution is pretty simple, really. We only need one bread dispenser for both of these two sandwich types, as long as we distribute the bread into two separate conveyor belts. These two belts, then, will manage to produce two types of sandwiches.

<091>

But then, of course, these sandwiches will have to have their tops closed. Otherwise, they will end up remaining as "open sandwiches", rather than regular sandwiches.

Again, a straightforward approach is to simply add a bread dispenser for cheese sandwiches, and another bread dispenser for ham sandwiches, like the ones shown below.

<092>

This will ensure that the resulting sandwiches are "sandwiches" instead of "open sandwiches". However, this is not the best solution.

Just like we do not need 2 bread dispensers for the bottom pieces of bread, we do not need 2 bread dispensers for the top pieces of bread. And the reason is that we are able to merge 2 conveyor belts into 1, just as we are able to split 1 conveyor belt into 2.

<093>

All we need to do is merge the two manufacturing lines into one. One tricky question which may arise, though, is: "How shall we arrange these two different types of sandwiches on a single belt?"

There are a multitude of ways in which they can be arranged. In our case, however, the most intuitive approach is to simply put them in an alternating manner, so that the resulting queue will look something like: [cheese, ham, cheese, ham, cheese, ham, ...].

To summarize the whole process, let me simplify our notations a bit. For example, let us suppose that an arrow denotes a conveyor belt.

<094>

Then, the full manufacturing process of both cheese and ham sandwiches can be illustrated as a neat diagram, like the one shown here:

<095>

The first production line creates a sequence of bottom pieces of bread. It then splits itself into two lines, one for adding cheese and the other one for adding ham. And then, these two lines merge back to a single line, upon which they both receive their top pieces of bread.

The result is the following sequences of sandwiches:

<096>

@@<hr>
@@<h3><b>Package Processing</b></h3>

Imagine, though, that our factory's goal is to manufacture not just sandwiches, but lunch boxes with multiple sandwiches in them. Let's say that each of our lunch boxes is expected to have 2 sandwiches in it - a cheese sandwich and a ham sandwich. What shall we do to mass-produce it?

<097>

We probably all agree that, in order for us to pack two sandwiches in one box, we must first pack each one of them individually first. Otherwise, how shall the customer even manage to tell which ingredients belong to which sandwich? If we do not pack these 2 sandwiches separately, consumers will just look at the whole chunk and assume that it is just a Big Mac (i.e. one super thick sandwich with a bit of extra bread in the middle).

So, let us install a new equipment called "packer". A packer's job is fairly simple; it just packs stacks of ingredients which happen to be passing underneath.

<098>

Now the conveyor belt is carrying sandwiches that are individually wrapped, thereby allowing us to treat them as fully legitimate sandwiches instead of mere stacks of edible components.

The next step is to put each pair of sandwiches (i.e. a cheese sandwich and a ham sandwich) in the same spot, so that we can put them in the same lunch box. For such a purpose, I will introduce yet another type of factory equipment called "holder".

A holder is capable of holding whatever is underneath, and then dropping it after a bit of time delay. In our case, it should first grab a cheese sandwich it sees.

<099>

While it is holding the cheese sandwich, then, the ham sandwich which was moving right behind it will continue moving forward.

<100>

Soon, this ham sandwich will come right beneath the cheese sandwich which has been held above. At this point, the only thing the holder needs to do is drop the cheese sandwich, so that it will land right on top of the ham sandwich. This is how we put two sandwiches together.

<101>

And, if we let our holder repeat these two actions (i.e. "hold" and "drop") over and over again, we will see that it will effectively end up transforming the alternating sequence of cheese and ham sandwiches into another sequence in which these two types of sandwiches are put together as pairs.

<102>

Such a process is different from that of a simple dispenser (such as "cheese dispenser"), whose only job is to simply keep dropping the same ingredient over and over.

<103>

The figure below illustrates the difference between a holder and a dispenser. A holder can both hold AND drop things, which means that it is capable of transporting something from one place to another. A dispenser, on the other hand, can only introduce new elements to the system; it is incapable of fiddling with what's already been out there on the belt.

<104>

Anyways, now that we have our cheese sandwiches sitting on top of our ham sandwiches, the remaining step is to pack each of these pairs, as a whole, to prevent them from separating from each other.

<105>

The result is the sequence of lunch boxes, each of which is a pack of a (packed) cheese sandwich and a (packed) ham sandwich.

The diagram shown below is the summary of what has been demonstrated so far.

<106>

First, we started from nothing (i.e. an empty conveyor belt). Next, we laid down pieces of bread and distributed them over two separate belts (one for cheese and the other one for ham). We then recombined these 2 into a single line of open sandwiches, closed their tops, packed the results, put them together as pairs, and finally packed them to obtain lunch boxes.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-7.html"%}Chapter 7{%/a%}))







:d:Sandwich Engineering is a brand new field of science which will transform the way we live. Learn how to make a sandwich now (while listening to whatever buzzwords I happen to be throwing at you), or you will miss out the only opportunity to succeed as a technological innovator!
:k:Sandwich, Industrial Engineering, Gastronomy, Culinary Arts, Food Science, Manufacturing, Tech Tree, Systems Engineering, Functional Programming, Computer Science, Computer Engineering, Lambda Calculus, Tech Innovation, Future Tech
:l:2025-02-06

[Sandwich Engineering - Chapter 7] February 6, 2025

@@<hr>
@@<h3><b>Toasting a Sandwich</b></h3>

So far, I have explained several ways of manufacturing sandwiches.

While these may sound a bit too technical, the underlying notion is not complicated at all. All we need to do is execute a sequence of actions which, when carried out in the right order, will manifest themselves in whichever types of sandwiches we want.

<107>

Let me go back to our previous example. We have seen that, by running a conveyor belt with a bread dispenser, a cheese dispenser, and another bread dispenser, we are able to produce a queue of cheese sandwiches.

<088>

The series of events you are witnessing here (i.e. (1) addition of bread, (2) addition of cheese, and (3) another addition of bread) can also be illustrated as a path inside the "tech tree" of sandwiches, like the one shown below.

<108>

Here, you should be able to see that the tech tree depicts all sorts of alternative ways in which a sandwich can be manipulated. The act of stacking the 3 ingredients of a cheese sandwich (i.e. bread, cheese, and bread), then, translates to the act of walking down the path which is highlighted above.

The thing is, however, that there are types of sandwiches which cannot be produced simply by stacking a bunch of ingredients.

For instance, what shall we do if we want a grilled cheese sandwich, rather than just a boring, squishy kind of sandwich with a slice of cold cheese in it?

<109>

In order to craft such a hot and crispy work of culinary arts, we need a more advanced equipment called "toaster" on our conveyor belt. Its job is to toast anything which passes through it.

<110>

For example, passing a cheese sandwich through a toaster will toast all of its 3 ingredients - the bottom bread, the cheese, and the top bread. Both pieces of bread will become pieces of toast (because "toasted bread" is the same thing as "toast" in our language), and the slice of cheese will become a slice of toasted cheese.

Now, you see that our definitions are beginning to get a bit complicated. For the sake of preserving our sanity, therefore, let us clarify things a bit before moving on.

First of all, a stack made out of a piece of bread, a slice of cheese, and another piece of bread is called a "cheese sandwich". We all agree on this, right?

<111>

And the truth is, such a stack would've been referred to as a "ham sandwich" if the slice of cheese were replaced by a slice of ham. And it would've been referred to as an "avacado sandwich" if the slice of cheese were replaced by a slice of avacado.

In general, therefore, we must be able to say that if "X" is surrounded by two pieces of bread (where "X" can be anything), the whole thing should be called an "X sandwich".

<112>

What happens when we replace the two pieces of bread with two pieces of toast? Common sense tells us that we should call it an "X toast sandwich" instead of just "X sandwich".

<113>

So, it is reasonable to state that if there is a slice of cheese between two pieces of toast, we ought to call it a "cheese toast sandwich" instead of just "cheese sandwich".

<114>

@@<hr>
@@<h3><b>Pattern Matching and Aliasing</b></h3>

There are somewhat trickier scenarios, though. What if we put a slice of toasted cheese between two pieces of (regular) bread? Or, in contrast, what if we put a slice of toasted cheese between two pieces of toast?

The way to resolve any potential source of confusion here, is to apply a general set of definitions instead of just making guesses. For this purpose, let such recall that:

(1) If "X" is surrounded by two pieces of bread, it must be called "X sandwich".
(2) If "X" is surrounded by two pieces of toast, it must be called "X toast sandwich".

<112>

<113>

Now try substituting the "X" with "toasted cheese". If you do, you will see how the aforementioned two sandwiches should be worded, from a purely literal viewpoint.

<115>

Obviously, though, we should admit that an expression such as "toasted cheese toast sandwich" is way too verbose. Typically, we just call such a thing as a "grilled cheese". Although it does not include some of the core descriptive words such as "sandwich" or "toast", we all know that it denotes a toast sandwich with toasted cheese in it.

<116>

What we are seeing here is an example of "sandwich type aliasing".

Since "toasted cheese toast sandwich" is too long, we have decided to use the term "grilled cheese" instead to indicate the same exact thing which "toasted cheese toast sandwich" aims to express. In this case, we say that "grilled cheese" is an alias of "toasted cheese toast sandwich".

And, when you look at the definition of "grilled cheese" in the form of a diagram (see the image below), you will see that an alias is just an extra reference (arrow) which is attached to the original term. We may also refer to such a thing as a "synonym".

<117>

@@<hr>
@@<h3><b>Topology of Sandwich Recipes</b></h3>

Now that we are clearly aware of what "grilled cheese" is supposed to mean, let us come back to its manufacturing process.

First of all, we know that stacking a piece of bread, a slice of cheese, and another piece of bread will yield a "cheese sandwich", right? This process can be established by setting up 3 dispensers in a row.

<088>

And then, we turn this "cheese sandwich" into a "grilled cheese" by letting it pass through a toaster.

<118>

An alternative way of imagining this whole process is to think of it as a path within the sandwich's tech tree. Each time we are taking a step in the assembly line of a grilled cheese, we are moving from one location in the tech tree to another. The image below, for instance, clearly reveals that we could reach the position of "grilled cheese" after 4 moves.

<119>

Here is where things start to get way more interesting. As you may have noticed already, the richness of our tech tree is determined by the diversity of modifications which can be applied to the sandwich. If the only option we had were to simply keep stacking pieces of bread and nothing else, our tech tree would have looked too bland due to the presence of nothing but a single linear path.

<120>

Once we equip ourselves with a multitude of alternative choices (e.g. "+bread", "+cheese", "toast", etc), on the other hand, the tree branches itself into a rich taxonomy of sandwich recipes.

<121>

And, speaking of recipes, here is one more concept I would like to introduce for the sake of providing our future sandwich craftsmen with additional insight. It starts with the notion that each path within the tech tree can be defined as a unique recipe for a sandwich.

As you can clearly tell already, a "grilled cheese" is just a toast sandwich with a slice of toasted cheese in it.

<122>

It is important to note, however, that its recipe is something different, and thus should be represented a bit differently.

A grilled cheese itself is undoubtedly made up of a piece of toast, a slice of toasted cheese, and another piece of toast. The recipe for a grilled cheese, on the other hand, is made up of a sequence of the following 4 instructions:

(1) Add a piece of bread, and
(2) Add a slice of cheese, and
(3) Add a piece of bread, and
(4) Toast it.

<123>

These four steps are the "ingredients" of the recipe; they exist as a stack not in our physical space where we can touch and view things, but in the space of events (aka "possibility space"). They are part of our imperative knowledge, as opposed to declarative knowledge.

(Will be continued in {%a href="https://thingspool.net/sandwich/page-8.html"%}Chapter 8{%/a%})









:d:Learn how to make a sandwich now, and you will become a creative tech entrepreneur who will innovate the future of B2B, SaaS, Web3, AI, and whatever! This is the final chapter of the series, "Sandwich Engineering".
:k:Tech, Entrepreneurship, IT, AI, Distributed Computing, Blockchain, Industrial Engineering, Web3, Machine Learning, Creativity, Innovation, Startup, DeFi, Software Development, Computer Science
:l:2025-02-08

[Sandwich Engineering - Chapter 8] February 8, 2025

@@<hr>
@@<h3><b>Generation and Consumption</b></h3>

Sandwich Engineering is a truly multifaceted area of study. It contains its own grammar, semantics, and procedures, as well as real-life examples (such as the factory analogy we have seen recently).

When it comes to pragmatic considerations, however, we should not forget that we need to spend resources in order to make a sandwich.

For instance, we cannot summon the ingredients of a ham sandwich out of thin air; the ham will have to come from a pig, the pig will have to come from the food it has eaten, and the food will have to come from crops which were grown somewhere else, and so on.

Every process, including the making of a sandwich, absorbs resources and converts them into other types of resources. For example, an apple farm takes resources which are necessary for sustaining plant life (e.g. water, light, and fertilizer), and grows apples off of them.

<124>

A pig farm, in turn, raises pigs by nourishing them with these apples.

<125>

Pigs, once grown, go to the nearest ham factory and transform themselves into slices of ham.

<126>

These slices of ham, then, travel to the nearest ham sandwich factory, enclose themselves with pieces of bread, and morph into ham sandwiches.

<127>

So, here is the idea. Resources do not come from nowhere; they must originate from somewhere else. And as we trace their origins, we begin to realize that there is not really a single "ultimate origin" before which no preceding cause can be found.

Resources neither get created nor destroyed. They circulate in our closed environment, continually dying and reviving in one form or another.

The world is one grand cycle of resources, which recurrently undergo a sequence of changes as they transition from one system to another.

<128>

Such a cycle, of course, is made up of myriad intertwined pathways, where streams of resources either converge or diverge as needed. A single producer may distribute its resources over multiple destinations, and a single destination may receive resources from multiple producers. An example is shown below.

<129>

There is one thing which may feel a bit vague, though. In the diagram above, for example, the branching pattern of arrows indicates that the bread factory is distributing its bread over 3 separate places - a "ham sandwich factory", a "cheese sandwich factory", and a "ham & cheese sandwich factory".

For the sake of simplicity, let me just omit the "ham & cheese sandwich factory" from the scene for now and leave only the other two.

<130>

We can imagine that the "ham sandwich factory" uses a bread dispenser for adding pieces of bread to its own production line.

<131>

The "cheese sandwich factory", too, can be imagined to be utilizing its own bread dispenser for adding pieces of bread to its own production line.

<132>

What seems so obvious here is that a bread dispenser is not a "magic hat" from which an infinite number of bread pieces can spawn. They must come from somewhere, and, in our case, this "somewhere" is the bread factory which functions as a bread-supplier.

<133>

Here is something fishy. Suppose that this bread factory continuously generates pieces of bread and puts them in its own storage area. What shall we do, then, to distribute them over their appropriate consumers? Should the employees of the sandwich factories come over, grab these lingering pieces of bread, and carry them back to refill the bread dispensers?

<134>

Such an approach may not sound too bad, but let us remind ourselves that bread is not the only type of ingredient that a sandwich needs. A ham sandwich factory, for instance, demands a continuous inflow of both bread AND ham in order to be able to produce ham sandwiches. Should its employees, then, repeatedly visit both a bread factory AND a ham factory just to provide their production line with the necessary ingredients?

<135>

This is not something we would desire. We want a central delivery system which is specialized for the work of transportation, so that the factory workers won't have to take extra time moving their resources from place to place.

<136>

One of the major benefits of having such a "middleman" is that it swiftly handles the case of multiple suppliers. If there are two distinct bread factories (as shown below), for example, sandwich factories will be able to receive bread even if one of these suppliers fail to operate.

<137>

@@<hr>
@@<h3><b>Universal Sandwich Machine</b></h3>

The presence of such a network of systems, however, is complex enough to annoy people who are not so fond of systematic thinking. Just take a look at the diagrams above; although I have only been dealing with a couple of simple cases, you can already tell that they are being bloated with a bunch of arrows, boxes, and other technical pieces.

Fortunately, it is not always necessary for us to represent everything in terms of a fabric of interrelated modules. Sometimes, it makes more sense to just come up with a single "universal" system which is so functionally versatile, that it is capable of handling a broad range of tasks as long as it is given an appropriate list of instructions.

For the purpose of demonstrating such a concept, let me introduce a new, powerful piece of machinery called the "universal sandwich machine".

<138>

This machine works in a manner similar to that of the "holder" module I've shown before. In addition, however, it is capable of jumping from one place to another. Also, it does not operate on a conveyor belt upon which the items are moving at a constant rate; instead, it hovers above a static table and visits each of its discrete locations whenever necessary.

In the picture above, for instance, there are 4 distinct slots on the table called "0", "1", "2", and "3". The universal sandwich machine begins its journey at "0".

Let us say that the goal of this machine is to make a ham sandwich. What shall it do, if we want it to fulfill such an objective?

First, it needs to lay down the bottom piece of bread. To do that, it ought to move to the place in which a piece of bread is available.

<139>

The next step, of course, is to grab a piece of bread that is right underneath.

<140>

The question is, at which specific location do we want to install our ham sandwich? It really depends on the context, but for the sake of illusration, let me just suppose here that we would like to see a ham sandwich at position "1".

The machine, then, will need to bring its piece of bread to position "1",

<141>

... and then drop the piece of bread it has been holding.

<142>

Now that the bottom piece of bread is prepared, the machine will then proceed to move to the place from which it is able to fetch a slice of ham.

<143>

Then, just like it did previously, it will grab whatever is underneath its current spot.

<144>

The next step is to move back to position "1" (where the ham sandwich is being prepared),

<145>

... and then drop the slice of ham it has been holding (just like it did with the piece of bread).

<146>

Now, the only remaining ingredient is the top piece of bread. Grabbing one and putting it on top of the slice of ham will close up the upper portion of the sandwich and turn it into a fully legitimate "ham sandwich".

The next immediate step for fulfilling such a process, of course, is to move back to the stock of bread pieces.

<147>

The machine will then grab a piece of bread, move back to where the ham sandwich's position, and drop the piece of bread to complete the full sandwich-making process.

<148>

<149>

<150>

Now we have it! If you take a look at position "1", you will see that it is now occupied by a ham sandwich. We did not employ a complex network of conveyor belts and dispensers to manufacture a sandwich. All we needed to do is prepare a special kind of device called the "universal sandwich machine" and let it carry out an appropriate list of instructions.

What is shown below is the list of instructions that the machine just carried out.

#$
moveTo 2
hold
moveTo 1
drop
moveTo 3
hold
moveTo 1
drop
moveTo 2
hold
moveTo 1
drop
#$

However, it is also true that even such a universal machine is incapable of summoning resources out of nowhere; it must fetch the necessary ingredients from somewhere else, which is the reason why it had to have access to a stack of bread (i.e. position "2") as well as a stack of ham (i.e. position "3").

<151>*

This is not the end of the story.

For example, imagine that we decide to create multiple copies of this "universal sandwich machine" and let them cooperate as a team. One of them might be designed to bring pieces of bread from outside and store them at "2", while another might be designed to bring slices of ham from outside and store them at "3". Meanwhile, another machine might be instructed to pack the finished ham sandwiches and put them into cardboard boxes, and so on.

This is "division of labor" in action.

(End of "Sandwich Engineering")