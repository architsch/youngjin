<!-- NOTE: This EJS file is auto-generated by 'EmbeddedScriptBuilder.ts' -->
<script>
const TextUtil =
{
    // character escape

    escapeHTMLChars: (text) =>
    {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;")
            .replaceAll("\n", "<br>")
            .replaceAll(" ", "&nbsp;");
    },

    // input validation

    findErrorInUserName: (text) =>
    {
        if (text.length < 4 || text.length > 16)
            return "error/userName/length";
        if (text != TextUtil.sanitizeUserName(text))
            return "error/userName/chars";
        return null;
    },
    findErrorInPassword: (text) =>
    {
        if (text.length < 6 || text.length > 24)
            return "error/password/length";
        if (text != TextUtil.sanitizePassword(text))
            return "error/password/chars";
        return null;
    },
    findErrorInEmailAddress: (text) =>
    {
        if (text.length > 64)
            return "error/email/length";
        const regex = /^[^\s@]+@[^\s@]+.[^\s@]+$/;
        if (!regex.test(text))
            return "error/email/chars"
        return null;
    },
    findErrorInRoomName: (text) =>
    {
        if (text.length < 4 || text.length > 64)
            return "error/roomName/length";
        if (text != TextUtil.sanitizeRoomName(text))
            return "error/roomName/chars";
        return null;
    },
    
    sanitizeUserName: (text) =>
    {
        if (text.length > 16)
            text = text.substring(0, 16);
        return text.replace(/[^a-zA-Z0-9_]/g, "");
    },
    sanitizePassword: (text) =>
    {
        if (text.length > 24)
            text = text.substring(0, 24);
        return text.replace(/[^a-zA-Z0-9~`!@#\$%\^&\*\(\)-_\+=\{\[\}\]\|\\:;"'<>,\.\?\/]/g, "");
    },
    sanitizeRoomName: (text) =>
    {
        return TextUtil.sanitizeRoomNameWithoutTrimming(text).trim();
    },
    sanitizeRoomNameWithoutTrimming: (text) =>
    {
        if (text.length > 64)
            text = text.substring(0, 64);
        return text.replace(/[^a-zA-Z0-9~`!@#\$%\^&\*\(\)-_\+=\{\[\}\]\|\\:;"'<>,\.\?\/\s]/g, "")
            .replace(/\s+/g, " "); // replace multiple consecutive spaces with a single space.
    },
}
</script>